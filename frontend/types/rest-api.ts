// tslint:disable
/**
 * Vega core state APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.73.0-preview.6
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

/**
 *
 * @export
 * @interface Apiv1Account
 */
export interface Apiv1Account {
  /**
   *
   * @type {string}
   * @memberof Apiv1Account
   */
  asset?: string
  /**
   *
   * @type {string}
   * @memberof Apiv1Account
   */
  balance?: string
  /**
   *
   * @type {string}
   * @memberof Apiv1Account
   */
  market?: string
  /**
   *
   * @type {string}
   * @memberof Apiv1Account
   */
  party?: string
  /**
   *
   * @type {string}
   * @memberof Apiv1Account
   */
  type?: string
}
/**
 * Operator describes the type of comparison.   - OPERATOR_UNSPECIFIED: The default value  - OPERATOR_EQUALS: Verify if the property values are strictly equal or not.  - OPERATOR_GREATER_THAN: Verify if the data source data value is greater than the Condition value.  - OPERATOR_GREATER_THAN_OR_EQUAL: Verify if the data source data value is greater than or equal to the Condition value.  - OPERATOR_LESS_THAN: Verify if the data source data value is less than the Condition value.  - OPERATOR_LESS_THAN_OR_EQUAL: Verify if the data source data value is less or equal to than the Condition value.
 * @export
 * @enum {string}
 */
export enum ConditionOperator {
  UNSPECIFIED = 'OPERATOR_UNSPECIFIED' as any,
  EQUALS = 'OPERATOR_EQUALS' as any,
  GREATERTHAN = 'OPERATOR_GREATER_THAN' as any,
  GREATERTHANOREQUAL = 'OPERATOR_GREATER_THAN_OR_EQUAL' as any,
  LESSTHAN = 'OPERATOR_LESS_THAN' as any,
  LESSTHANOREQUAL = 'OPERATOR_LESS_THAN_OR_EQUAL' as any
}

/**
 * - TRADING_MODE_UNSPECIFIED: Default value, this is invalid  - TRADING_MODE_CONTINUOUS: Normal trading  - TRADING_MODE_BATCH_AUCTION: Auction trading (FBA)  - TRADING_MODE_OPENING_AUCTION: Opening auction  - TRADING_MODE_MONITORING_AUCTION: Auction triggered by monitoring  - TRADING_MODE_NO_TRADING: No trading is allowed  - TRADING_MODE_SUSPENDED_VIA_GOVERNANCE: Special auction mode triggered via governance
 * @export
 * @enum {string}
 */
export enum MarketTradingMode {
  UNSPECIFIED = 'TRADING_MODE_UNSPECIFIED' as any,
  CONTINUOUS = 'TRADING_MODE_CONTINUOUS' as any,
  BATCHAUCTION = 'TRADING_MODE_BATCH_AUCTION' as any,
  OPENINGAUCTION = 'TRADING_MODE_OPENING_AUCTION' as any,
  MONITORINGAUCTION = 'TRADING_MODE_MONITORING_AUCTION' as any,
  NOTRADING = 'TRADING_MODE_NO_TRADING' as any,
  SUSPENDEDVIAGOVERNANCE = 'TRADING_MODE_SUSPENDED_VIA_GOVERNANCE' as any
}

/**
 * `NullValue` is a singleton enumeration to represent the null value for the `Value` type union.   The JSON representation for `NullValue` is JSON `null`.   - NULL_VALUE: Null value.
 * @export
 * @enum {string}
 */
export enum ProtobufNullValue {
  NULLVALUE = 'NULL_VALUE' as any
}
/**
 *
 * @export
 * @interface V1Condition
 */
export interface V1Condition {
  /**
   *
   * @type {ConditionOperator}
   * @memberof V1Condition
   */
  operator?: ConditionOperator
  /**
   * Value to be compared with by the operator.
   * @type {string}
   * @memberof V1Condition
   */
  value?: string
}
/**
 *
 * @export
 * @interface V1ETHAddress
 */
export interface V1ETHAddress {
  /**
   *
   * @type {string}
   * @memberof V1ETHAddress
   */
  address?: string
}
/**
 * Filter describes the conditions under which a data source data is considered of interest or not.
 * @export
 * @interface V1Filter
 */
export interface V1Filter {
  /**
   * Conditions that should be matched by the data to be considered of interest.
   * @type {Array<V1Condition>}
   * @memberof V1Filter
   */
  conditions?: Array<V1Condition>
  /**
   *
   * @type {V1PropertyKey}
   * @memberof V1Filter
   */
  key?: V1PropertyKey
}
/**
 * Trigger for an internal time data source.
 * @export
 * @interface V1InternalTimeTrigger
 */
export interface V1InternalTimeTrigger {
  /**
   * Repeat the trigger every n seconds after the initial. If no time for initial was specified, begin repeating immediately.
   * @type {string}
   * @memberof V1InternalTimeTrigger
   */
  every?: string
  /**
   * Trigger when the vega time is greater or equal to this time, in Unix seconds.
   * @type {string}
   * @memberof V1InternalTimeTrigger
   */
  initial?: string
}
/**
 *
 * @export
 * @interface V1ListAccountsResponse
 */
export interface V1ListAccountsResponse {
  /**
   *
   * @type {Array<Apiv1Account>}
   * @memberof V1ListAccountsResponse
   */
  accounts?: Array<Apiv1Account>
}
/**
 *
 * @export
 * @interface V1ListAssetsResponse
 */
export interface V1ListAssetsResponse {
  /**
   *
   * @type {Array<VegaAsset>}
   * @memberof V1ListAssetsResponse
   */
  assets?: Array<VegaAsset>
}
/**
 *
 * @export
 * @interface V1ListDelegationsResponse
 */
export interface V1ListDelegationsResponse {
  /**
   *
   * @type {Array<VegaDelegation>}
   * @memberof V1ListDelegationsResponse
   */
  delegations?: Array<VegaDelegation>
}
/**
 *
 * @export
 * @interface V1ListMarketsDataResponse
 */
export interface V1ListMarketsDataResponse {
  /**
   *
   * @type {Array<VegaMarketData>}
   * @memberof V1ListMarketsDataResponse
   */
  marketsData?: Array<VegaMarketData>
}
/**
 *
 * @export
 * @interface V1ListMarketsResponse
 */
export interface V1ListMarketsResponse {
  /**
   *
   * @type {Array<VegaMarket>}
   * @memberof V1ListMarketsResponse
   */
  markets?: Array<VegaMarket>
}
/**
 *
 * @export
 * @interface V1ListNetworkLimitsResponse
 */
export interface V1ListNetworkLimitsResponse {
  /**
   *
   * @type {VegaNetworkLimits}
   * @memberof V1ListNetworkLimitsResponse
   */
  networkLimits?: VegaNetworkLimits
}
/**
 *
 * @export
 * @interface V1ListNetworkParametersResponse
 */
export interface V1ListNetworkParametersResponse {
  /**
   *
   * @type {Array<VegaNetworkParameter>}
   * @memberof V1ListNetworkParametersResponse
   */
  networkParameters?: Array<VegaNetworkParameter>
}
/**
 *
 * @export
 * @interface V1ListPartiesResponse
 */
export interface V1ListPartiesResponse {
  /**
   *
   * @type {Array<VegaParty>}
   * @memberof V1ListPartiesResponse
   */
  parties?: Array<VegaParty>
}
/**
 *
 * @export
 * @interface V1ListPartiesStakeResponse
 */
export interface V1ListPartiesStakeResponse {
  /**
   *
   * @type {Array<V1PartyStake>}
   * @memberof V1ListPartiesStakeResponse
   */
  partiesStake?: Array<V1PartyStake>
}
/**
 *
 * @export
 * @interface V1ListProposalsResponse
 */
export interface V1ListProposalsResponse {
  /**
   *
   * @type {Array<VegaProposal>}
   * @memberof V1ListProposalsResponse
   */
  proposals?: Array<VegaProposal>
}
/**
 *
 * @export
 * @interface V1ListValidatorsResponse
 */
export interface V1ListValidatorsResponse {
  /**
   *
   * @type {Array<V1ValidatorUpdate>}
   * @memberof V1ListValidatorsResponse
   */
  validators?: Array<V1ValidatorUpdate>
}
/**
 *
 * @export
 * @interface V1ListVotesResponse
 */
export interface V1ListVotesResponse {
  /**
   *
   * @type {Array<VegaVote>}
   * @memberof V1ListVotesResponse
   */
  votes?: Array<VegaVote>
}
/**
 *
 * @export
 * @interface V1PartyStake
 */
export interface V1PartyStake {
  /**
   *
   * @type {string}
   * @memberof V1PartyStake
   */
  currentStakeAvailable?: string
  /**
   *
   * @type {string}
   * @memberof V1PartyStake
   */
  party?: string
  /**
   *
   * @type {Array<V1StakeLinking>}
   * @memberof V1PartyStake
   */
  stakeLinkings?: Array<V1StakeLinking>
}
/**
 * PropertyKey describes the property key contained in data source data.
 * @export
 * @interface V1PropertyKey
 */
export interface V1PropertyKey {
  /**
   * Name of the property.
   * @type {string}
   * @memberof V1PropertyKey
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof V1PropertyKey
   */
  numberDecimalPlaces?: string
  /**
   *
   * @type {V1PropertyKeyType}
   * @memberof V1PropertyKey
   */
  type?: V1PropertyKeyType
}
/**
 * Type describes the data type of properties that are supported by the data source engine.   - TYPE_UNSPECIFIED: The default value.  - TYPE_EMPTY: Any type.  - TYPE_INTEGER: Integer type.  - TYPE_STRING: String type.  - TYPE_BOOLEAN: Boolean type.  - TYPE_DECIMAL: Any floating point decimal type.  - TYPE_TIMESTAMP: Timestamp date type.
 * @export
 * @enum {string}
 */
export enum V1PropertyKeyType {
  UNSPECIFIED = 'TYPE_UNSPECIFIED' as any,
  EMPTY = 'TYPE_EMPTY' as any,
  INTEGER = 'TYPE_INTEGER' as any,
  STRING = 'TYPE_STRING' as any,
  BOOLEAN = 'TYPE_BOOLEAN' as any,
  DECIMAL = 'TYPE_DECIMAL' as any,
  TIMESTAMP = 'TYPE_TIMESTAMP' as any
}
/**
 * PubKey is the public key that signed this data. Different public keys coming from different sources will be further separated.
 * @export
 * @interface V1PubKey
 */
export interface V1PubKey {
  /**
   *
   * @type {string}
   * @memberof V1PubKey
   */
  key?: string
}
/**
 *
 * @export
 * @interface V1Signer
 */
export interface V1Signer {
  /**
   *
   * @type {V1ETHAddress}
   * @memberof V1Signer
   */
  ethAddress?: V1ETHAddress
  /**
   *
   * @type {V1PubKey}
   * @memberof V1Signer
   */
  pubKey?: V1PubKey
}
/**
 *
 * @export
 * @interface V1StakeLinking
 */
export interface V1StakeLinking {
  /**
   * Amount of stake deposited or removed.
   * @type {string}
   * @memberof V1StakeLinking
   */
  amount?: string
  /**
   * Block when the event happened.
   * @type {string}
   * @memberof V1StakeLinking
   */
  blockHeight?: string
  /**
   * Block time.
   * @type {string}
   * @memberof V1StakeLinking
   */
  blockTime?: string
  /**
   * Ethereum address from which the stake link was initiated.
   * @type {string}
   * @memberof V1StakeLinking
   */
  ethereumAddress?: string
  /**
   * Time at which the Vega network finalised the state of the event.
   * @type {string}
   * @memberof V1StakeLinking
   */
  finalizedAt?: string
  /**
   *
   * @type {string}
   * @memberof V1StakeLinking
   */
  id?: string
  /**
   * Log index.
   * @type {string}
   * @memberof V1StakeLinking
   */
  logIndex?: string
  /**
   * Party to whom the event is directed at.
   * @type {string}
   * @memberof V1StakeLinking
   */
  party?: string
  /**
   *
   * @type {V1StakeLinkingStatus}
   * @memberof V1StakeLinking
   */
  status?: V1StakeLinkingStatus
  /**
   * Timestamp in Unix nanoseconds of when the event was emitted by Ethereum.
   * @type {string}
   * @memberof V1StakeLinking
   */
  ts?: string
  /**
   * Hash of the transaction in which the event happened.
   * @type {string}
   * @memberof V1StakeLinking
   */
  txHash?: string
  /**
   *
   * @type {V1StakeLinkingType}
   * @memberof V1StakeLinking
   */
  type?: V1StakeLinkingType
}
/**
 *
 * @export
 * @enum {string}
 */
export enum V1StakeLinkingStatus {
  UNSPECIFIED = 'STATUS_UNSPECIFIED' as any,
  PENDING = 'STATUS_PENDING' as any,
  ACCEPTED = 'STATUS_ACCEPTED' as any,
  REJECTED = 'STATUS_REJECTED' as any
}
/**
 *
 * @export
 * @enum {string}
 */
export enum V1StakeLinkingType {
  UNSPECIFIED = 'TYPE_UNSPECIFIED' as any,
  LINK = 'TYPE_LINK' as any,
  UNLINK = 'TYPE_UNLINK' as any
}
/**
 *
 * @export
 * @interface V1ValidatorUpdate
 */
export interface V1ValidatorUpdate {
  /**
   *
   * @type {boolean}
   * @memberof V1ValidatorUpdate
   */
  added?: boolean
  /**
   *
   * @type {string}
   * @memberof V1ValidatorUpdate
   */
  avatarUrl?: string
  /**
   *
   * @type {string}
   * @memberof V1ValidatorUpdate
   */
  country?: string
  /**
   *
   * @type {string}
   * @memberof V1ValidatorUpdate
   */
  epochSeq?: string
  /**
   *
   * @type {string}
   * @memberof V1ValidatorUpdate
   */
  ethereumAddress?: string
  /**
   *
   * @type {string}
   * @memberof V1ValidatorUpdate
   */
  fromEpoch?: string
  /**
   *
   * @type {string}
   * @memberof V1ValidatorUpdate
   */
  infoUrl?: string
  /**
   *
   * @type {string}
   * @memberof V1ValidatorUpdate
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof V1ValidatorUpdate
   */
  nodeId?: string
  /**
   *
   * @type {string}
   * @memberof V1ValidatorUpdate
   */
  submitterAddress?: string
  /**
   *
   * @type {string}
   * @memberof V1ValidatorUpdate
   */
  tmPubKey?: string
  /**
   *
   * @type {string}
   * @memberof V1ValidatorUpdate
   */
  vegaPubKey?: string
  /**
   *
   * @type {number}
   * @memberof V1ValidatorUpdate
   */
  vegaPubKeyIndex?: number
}
/**
 * - ACCOUNT_TYPE_UNSPECIFIED: Default value  - ACCOUNT_TYPE_INSURANCE: Insurance pool accounts contain insurance pool funds for a market  - ACCOUNT_TYPE_SETTLEMENT: Settlement accounts exist only during settlement or mark-to-market  - ACCOUNT_TYPE_MARGIN: Margin accounts contain funds set aside for the margin needed to support a party's open positions. Each party will have a margin account for each market they have traded in. Required initial margin is allocated to each market from user's general account. Collateral in the margin account can't be withdrawn or used as margin on another market until it is released back to the general account. Vega protocol uses an internal accounting system to segregate funds held as margin from other funds to ensure they are never lost or 'double spent'  Margin account funds will vary as margin requirements on positions change  - ACCOUNT_TYPE_GENERAL: General accounts contain the collateral for a party that is not otherwise allocated. A party will have multiple general accounts, one for each asset they want to trade with  General accounts are where funds are initially deposited or withdrawn from, it is also the account where funds are taken to fulfil fees and initial margin requirements  - ACCOUNT_TYPE_FEES_INFRASTRUCTURE: Infrastructure accounts contain fees earned by providing infrastructure on Vega  - ACCOUNT_TYPE_FEES_LIQUIDITY: Liquidity accounts contain fees earned by providing liquidity on Vega markets  - ACCOUNT_TYPE_FEES_MAKER: This account is created to hold fees earned by placing orders that sit on the book and are then matched with an incoming order to create a trade - These fees reward parties who provide the best priced liquidity that actually allows trading to take place  - ACCOUNT_TYPE_BOND: This account is created to maintain liquidity providers funds commitments  - ACCOUNT_TYPE_EXTERNAL: External account represents an external source (deposit/withdrawal)  - ACCOUNT_TYPE_GLOBAL_INSURANCE: Global insurance account for the asset  - ACCOUNT_TYPE_GLOBAL_REWARD: Global reward account for the asset  - ACCOUNT_TYPE_PENDING_TRANSFERS: Per asset account used to store pending transfers (if any)  - ACCOUNT_TYPE_REWARD_MAKER_PAID_FEES: Per asset reward account for fees paid to makers  - ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES: Per asset reward account for fees received by makers  - ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES: Per asset reward account for fees received by liquidity providers  - ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS: Per asset reward account for market proposers when the market goes above some trading threshold  - ACCOUNT_TYPE_HOLDING: Per asset account for holding in-flight unfilled orders' funds  - ACCOUNT_TYPE_LP_LIQUIDITY_FEES: Network controlled liquidity provider's account, per market, to hold accrued liquidity fees.  - ACCOUNT_TYPE_LIQUIDITY_FEES_BONUS_DISTRIBUTION: Network controlled liquidity fees bonus distribution account, per market.  - ACCOUNT_TYPE_NETWORK_TREASURY: Network controlled treasury  - ACCOUNT_TYPE_VESTING_REWARDS: Account holding user's rewards for the vesting period  - ACCOUNT_TYPE_VESTED_REWARDS: Account holding user's rewards after the vesting period  - ACCOUNT_TYPE_REWARD_AVERAGE_POSITION: Per asset market reward account given for average position  - ACCOUNT_TYPE_REWARD_RELATIVE_RETURN: Per asset market reward account given for relative return  - ACCOUNT_TYPE_REWARD_RETURN_VOLATILITY: Per asset market reward account given for return volatility  - ACCOUNT_TYPE_REWARD_VALIDATOR_RANKING: Per asset market reward account given to validators by their ranking  - ACCOUNT_TYPE_PENDING_FEE_REFERRAL_REWARD: Per asset account for pending fee referral reward payouts
 * @export
 * @enum {string}
 */
export enum VegaAccountType {
  UNSPECIFIED = 'ACCOUNT_TYPE_UNSPECIFIED' as any,
  INSURANCE = 'ACCOUNT_TYPE_INSURANCE' as any,
  SETTLEMENT = 'ACCOUNT_TYPE_SETTLEMENT' as any,
  MARGIN = 'ACCOUNT_TYPE_MARGIN' as any,
  GENERAL = 'ACCOUNT_TYPE_GENERAL' as any,
  FEESINFRASTRUCTURE = 'ACCOUNT_TYPE_FEES_INFRASTRUCTURE' as any,
  FEESLIQUIDITY = 'ACCOUNT_TYPE_FEES_LIQUIDITY' as any,
  FEESMAKER = 'ACCOUNT_TYPE_FEES_MAKER' as any,
  BOND = 'ACCOUNT_TYPE_BOND' as any,
  EXTERNAL = 'ACCOUNT_TYPE_EXTERNAL' as any,
  GLOBALINSURANCE = 'ACCOUNT_TYPE_GLOBAL_INSURANCE' as any,
  GLOBALREWARD = 'ACCOUNT_TYPE_GLOBAL_REWARD' as any,
  PENDINGTRANSFERS = 'ACCOUNT_TYPE_PENDING_TRANSFERS' as any,
  REWARDMAKERPAIDFEES = 'ACCOUNT_TYPE_REWARD_MAKER_PAID_FEES' as any,
  REWARDMAKERRECEIVEDFEES = 'ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES' as any,
  REWARDLPRECEIVEDFEES = 'ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES' as any,
  REWARDMARKETPROPOSERS = 'ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS' as any,
  HOLDING = 'ACCOUNT_TYPE_HOLDING' as any,
  LPLIQUIDITYFEES = 'ACCOUNT_TYPE_LP_LIQUIDITY_FEES' as any,
  LIQUIDITYFEESBONUSDISTRIBUTION = 'ACCOUNT_TYPE_LIQUIDITY_FEES_BONUS_DISTRIBUTION' as any,
  NETWORKTREASURY = 'ACCOUNT_TYPE_NETWORK_TREASURY' as any,
  VESTINGREWARDS = 'ACCOUNT_TYPE_VESTING_REWARDS' as any,
  VESTEDREWARDS = 'ACCOUNT_TYPE_VESTED_REWARDS' as any,
  REWARDAVERAGEPOSITION = 'ACCOUNT_TYPE_REWARD_AVERAGE_POSITION' as any,
  REWARDRELATIVERETURN = 'ACCOUNT_TYPE_REWARD_RELATIVE_RETURN' as any,
  REWARDRETURNVOLATILITY = 'ACCOUNT_TYPE_REWARD_RETURN_VOLATILITY' as any,
  REWARDVALIDATORRANKING = 'ACCOUNT_TYPE_REWARD_VALIDATOR_RANKING' as any,
  PENDINGFEEREFERRALREWARD = 'ACCOUNT_TYPE_PENDING_FEE_REFERRAL_REWARD' as any
}
/**
 *
 * @export
 * @interface VegaAsset
 */
export interface VegaAsset {
  /**
   *
   * @type {VegaAssetDetails}
   * @memberof VegaAsset
   */
  details?: VegaAssetDetails
  /**
   * Internal identifier of the asset.
   * @type {string}
   * @memberof VegaAsset
   */
  id?: string
  /**
   *
   * @type {VegaAssetStatus}
   * @memberof VegaAsset
   */
  status?: VegaAssetStatus
}
/**
 *
 * @export
 * @interface VegaAssetDetails
 */
export interface VegaAssetDetails {
  /**
   *
   * @type {VegaBuiltinAsset}
   * @memberof VegaAssetDetails
   */
  builtinAsset?: VegaBuiltinAsset
  /**
   * Number of decimal / precision handled by this asset.
   * @type {string}
   * @memberof VegaAssetDetails
   */
  decimals?: string
  /**
   *
   * @type {VegaERC20}
   * @memberof VegaAssetDetails
   */
  erc20?: VegaERC20
  /**
   * Name of the asset (e.g: Great British Pound).
   * @type {string}
   * @memberof VegaAssetDetails
   */
  name?: string
  /**
   * Minimum economically meaningful amount in the asset.
   * @type {string}
   * @memberof VegaAssetDetails
   */
  quantum?: string
  /**
   * Symbol of the asset (e.g: GBP).
   * @type {string}
   * @memberof VegaAssetDetails
   */
  symbol?: string
}
/**
 * Changes to apply on an existing asset.
 * @export
 * @interface VegaAssetDetailsUpdate
 */
export interface VegaAssetDetailsUpdate {
  /**
   *
   * @type {VegaERC20Update}
   * @memberof VegaAssetDetailsUpdate
   */
  erc20?: VegaERC20Update
  /**
   * Minimum economically meaningful amount in the asset.
   * @type {string}
   * @memberof VegaAssetDetailsUpdate
   */
  quantum?: string
}
/**
 *
 * @export
 * @enum {string}
 */
export enum VegaAssetStatus {
  UNSPECIFIED = 'STATUS_UNSPECIFIED' as any,
  PROPOSED = 'STATUS_PROPOSED' as any,
  REJECTED = 'STATUS_REJECTED' as any,
  PENDINGLISTING = 'STATUS_PENDING_LISTING' as any,
  ENABLED = 'STATUS_ENABLED' as any
}
/**
 *
 * @export
 * @interface VegaAuctionDuration
 */
export interface VegaAuctionDuration {
  /**
   * Duration of the auction in seconds.
   * @type {string}
   * @memberof VegaAuctionDuration
   */
  duration?: string
  /**
   * Target uncrossing trading volume.
   * @type {string}
   * @memberof VegaAuctionDuration
   */
  volume?: string
}
/**
 * - AUCTION_TRIGGER_UNSPECIFIED: Default value for AuctionTrigger, no auction triggered  - AUCTION_TRIGGER_BATCH: Batch auction  - AUCTION_TRIGGER_OPENING: Opening auction  - AUCTION_TRIGGER_PRICE: Price monitoring trigger  - AUCTION_TRIGGER_LIQUIDITY: Deprecated  - AUCTION_TRIGGER_LIQUIDITY_TARGET_NOT_MET: Liquidity auction due to not enough committed liquidity  - AUCTION_TRIGGER_UNABLE_TO_DEPLOY_LP_ORDERS: Deprecated  - AUCTION_TRIGGER_GOVERNANCE_SUSPENSION: Market is suspended and put into auction via governance
 * @export
 * @enum {string}
 */
export enum VegaAuctionTrigger {
  UNSPECIFIED = 'AUCTION_TRIGGER_UNSPECIFIED' as any,
  BATCH = 'AUCTION_TRIGGER_BATCH' as any,
  OPENING = 'AUCTION_TRIGGER_OPENING' as any,
  PRICE = 'AUCTION_TRIGGER_PRICE' as any,
  LIQUIDITY = 'AUCTION_TRIGGER_LIQUIDITY' as any,
  LIQUIDITYTARGETNOTMET = 'AUCTION_TRIGGER_LIQUIDITY_TARGET_NOT_MET' as any,
  UNABLETODEPLOYLPORDERS = 'AUCTION_TRIGGER_UNABLE_TO_DEPLOY_LP_ORDERS' as any,
  GOVERNANCESUSPENSION = 'AUCTION_TRIGGER_GOVERNANCE_SUSPENSION' as any
}
/**
 *
 * @export
 * @interface VegaBenefitTier
 */
export interface VegaBenefitTier {
  /**
   * Required number of epochs a party must have been in a referral set to access this tier.
   * @type {string}
   * @memberof VegaBenefitTier
   */
  minimumEpochs?: string
  /**
   * Required running notional taker volume in quantum units for parties to access this tier.
   * @type {string}
   * @memberof VegaBenefitTier
   */
  minimumRunningNotionalTakerVolume?: string
  /**
   *
   * @type {string}
   * @memberof VegaBenefitTier
   */
  referralDiscountFactor?: string
  /**
   *
   * @type {string}
   * @memberof VegaBenefitTier
   */
  referralRewardFactor?: string
}
/**
 *
 * @export
 * @interface VegaBuiltinAsset
 */
export interface VegaBuiltinAsset {
  /**
   * Maximum amount that can be requested by a party through the built-in asset faucet at a time.
   * @type {string}
   * @memberof VegaBuiltinAsset
   */
  maxFaucetAmountMint?: string
}
/**
 *
 * @export
 * @interface VegaCancelTransfer
 */
export interface VegaCancelTransfer {
  /**
   *
   * @type {VegaCancelTransferConfiguration}
   * @memberof VegaCancelTransfer
   */
  changes?: VegaCancelTransferConfiguration
}
/**
 *
 * @export
 * @interface VegaCancelTransferConfiguration
 */
export interface VegaCancelTransferConfiguration {
  /**
   * ID of the governance transfer proposal.
   * @type {string}
   * @memberof VegaCancelTransferConfiguration
   */
  transferId?: string
}
/**
 * Represents the top level object that handles data sources. Data source definition can be external or internal, with whatever number of data sources are defined for each type in the child objects below.
 * @export
 * @interface VegaDataSourceDefinition
 */
export interface VegaDataSourceDefinition {
  /**
   *
   * @type {VegaDataSourceDefinitionExternal}
   * @memberof VegaDataSourceDefinition
   */
  external?: VegaDataSourceDefinitionExternal
  /**
   *
   * @type {VegaDataSourceDefinitionInternal}
   * @memberof VegaDataSourceDefinition
   */
  internal?: VegaDataSourceDefinitionInternal
}
/**
 * DataSourceDefinitionExternal is the top level object used for all external data sources. It contains one of any of the defined `SourceType` variants.
 * @export
 * @interface VegaDataSourceDefinitionExternal
 */
export interface VegaDataSourceDefinitionExternal {
  /**
   *
   * @type {VegaEthCallSpec}
   * @memberof VegaDataSourceDefinitionExternal
   */
  ethOracle?: VegaEthCallSpec
  /**
   *
   * @type {VegaDataSourceSpecConfiguration}
   * @memberof VegaDataSourceDefinitionExternal
   */
  oracle?: VegaDataSourceSpecConfiguration
}
/**
 * Top level object used for all internal data sources. It contains one of any of the defined source type variants.
 * @export
 * @interface VegaDataSourceDefinitionInternal
 */
export interface VegaDataSourceDefinitionInternal {
  /**
   *
   * @type {VegaDataSourceSpecConfigurationTime}
   * @memberof VegaDataSourceDefinitionInternal
   */
  time?: VegaDataSourceSpecConfigurationTime
  /**
   *
   * @type {VegaDataSourceSpecConfigurationTimeTrigger}
   * @memberof VegaDataSourceDefinitionInternal
   */
  timeTrigger?: VegaDataSourceSpecConfigurationTimeTrigger
}
/**
 * Data source spec describes the data source base that a product or a risk model wants to get from the data source engine. This message contains additional information used by the API.
 * @export
 * @interface VegaDataSourceSpec
 */
export interface VegaDataSourceSpec {
  /**
   *
   * @type {string}
   * @memberof VegaDataSourceSpec
   */
  createdAt?: string
  /**
   *
   * @type {VegaDataSourceDefinition}
   * @memberof VegaDataSourceSpec
   */
  data?: VegaDataSourceDefinition
  /**
   * Hash generated from the DataSpec data.
   * @type {string}
   * @memberof VegaDataSourceSpec
   */
  id?: string
  /**
   *
   * @type {VegaDataSourceSpecStatus}
   * @memberof VegaDataSourceSpec
   */
  status?: VegaDataSourceSpecStatus
  /**
   *
   * @type {string}
   * @memberof VegaDataSourceSpec
   */
  updatedAt?: string
}
/**
 * All types of external data sources use the same configuration set for meeting requirements in order for the data to be useful for Vega - valid signatures and matching filters.
 * @export
 * @interface VegaDataSourceSpecConfiguration
 */
export interface VegaDataSourceSpecConfiguration {
  /**
   * Filters describes which source data are considered of interest or not for the product (or the risk model).
   * @type {Array<V1Filter>}
   * @memberof VegaDataSourceSpecConfiguration
   */
  filters?: Array<V1Filter>
  /**
   * Signers is the list of authorized signatures that signed the data for this source. All the signatures in the data source data should be contained in this external source. All the signatures in the data should be contained in this list.
   * @type {Array<V1Signer>}
   * @memberof VegaDataSourceSpecConfiguration
   */
  signers?: Array<V1Signer>
}
/**
 * Internal data source used for emitting timestamps.
 * @export
 * @interface VegaDataSourceSpecConfigurationTime
 */
export interface VegaDataSourceSpecConfigurationTime {
  /**
   * Conditions that the timestamps should meet in order to be considered.
   * @type {Array<V1Condition>}
   * @memberof VegaDataSourceSpecConfigurationTime
   */
  conditions?: Array<V1Condition>
}
/**
 * Internal data source used for emitting timestamps automatically using predefined intervals and conditions.
 * @export
 * @interface VegaDataSourceSpecConfigurationTimeTrigger
 */
export interface VegaDataSourceSpecConfigurationTimeTrigger {
  /**
   * Conditions that the timestamps need to meet in order to be considered.
   * @type {Array<V1Condition>}
   * @memberof VegaDataSourceSpecConfigurationTimeTrigger
   */
  conditions?: Array<V1Condition>
  /**
   *
   * @type {Array<V1InternalTimeTrigger>}
   * @memberof VegaDataSourceSpecConfigurationTimeTrigger
   */
  triggers?: Array<V1InternalTimeTrigger>
}
/**
 * - STATUS_UNSPECIFIED: Default value.  - STATUS_ACTIVE: STATUS_ACTIVE describes an active data source spec.  - STATUS_DEACTIVATED: STATUS_DEACTIVATED describes a data source spec that is not listening to data anymore.
 * @export
 * @enum {string}
 */
export enum VegaDataSourceSpecStatus {
  UNSPECIFIED = 'STATUS_UNSPECIFIED' as any,
  ACTIVE = 'STATUS_ACTIVE' as any,
  DEACTIVATED = 'STATUS_DEACTIVATED' as any
}
/**
 *
 * @export
 * @interface VegaDataSourceSpecToFutureBinding
 */
export interface VegaDataSourceSpecToFutureBinding {
  /**
   * Name of the property in the source data that should be used as settlement data. If it is set to \"prices.BTC.value\", then the Future will use the value of this property as settlement data.
   * @type {string}
   * @memberof VegaDataSourceSpecToFutureBinding
   */
  settlementDataProperty?: string
  /**
   * Name of the property in the data source data that signals termination of trading.
   * @type {string}
   * @memberof VegaDataSourceSpecToFutureBinding
   */
  tradingTerminationProperty?: string
}
/**
 *
 * @export
 * @interface VegaDataSourceSpecToPerpetualBinding
 */
export interface VegaDataSourceSpecToPerpetualBinding {
  /**
   * Name of the property in the source data that should be used as settlement data. If it is set to \"prices.BTC.value\", then the perpetual market will use the value of this property as settlement data.
   * @type {string}
   * @memberof VegaDataSourceSpecToPerpetualBinding
   */
  settlementDataProperty?: string
  /**
   * Name of the property in the source data that should be used as settlement data. If it is set to \"prices.BTC.value\", then the perpetual market will use the value of this property as settlement data.
   * @type {string}
   * @memberof VegaDataSourceSpecToPerpetualBinding
   */
  settlementScheduleProperty?: string
}
/**
 *
 * @export
 * @interface VegaDelegation
 */
export interface VegaDelegation {
  /**
   * Amount delegated. This field is an unsigned integer scaled to the asset's decimal places.
   * @type {string}
   * @memberof VegaDelegation
   */
  amount?: string
  /**
   * Epoch of delegation.
   * @type {string}
   * @memberof VegaDelegation
   */
  epochSeq?: string
  /**
   * Node ID to delegate to.
   * @type {string}
   * @memberof VegaDelegation
   */
  nodeId?: string
  /**
   * Party which is delegating.
   * @type {string}
   * @memberof VegaDelegation
   */
  party?: string
}
/**
 *
 * @export
 * @enum {string}
 */
export enum VegaDispatchMetric {
  UNSPECIFIED = 'DISPATCH_METRIC_UNSPECIFIED' as any,
  MAKERFEESPAID = 'DISPATCH_METRIC_MAKER_FEES_PAID' as any,
  MAKERFEESRECEIVED = 'DISPATCH_METRIC_MAKER_FEES_RECEIVED' as any,
  LPFEESRECEIVED = 'DISPATCH_METRIC_LP_FEES_RECEIVED' as any,
  MARKETVALUE = 'DISPATCH_METRIC_MARKET_VALUE' as any,
  AVERAGEPOSITION = 'DISPATCH_METRIC_AVERAGE_POSITION' as any,
  RELATIVERETURN = 'DISPATCH_METRIC_RELATIVE_RETURN' as any,
  RETURNVOLATILITY = 'DISPATCH_METRIC_RETURN_VOLATILITY' as any,
  VALIDATORRANKING = 'DISPATCH_METRIC_VALIDATOR_RANKING' as any
}
/**
 *
 * @export
 * @interface VegaDispatchStrategy
 */
export interface VegaDispatchStrategy {
  /**
   * Asset to use for metric.
   * @type {string}
   * @memberof VegaDispatchStrategy
   */
  assetForMetric?: string
  /**
   *
   * @type {VegaDistributionStrategy}
   * @memberof VegaDispatchStrategy
   */
  distributionStrategy?: VegaDistributionStrategy
  /**
   *
   * @type {VegaEntityScope}
   * @memberof VegaDispatchStrategy
   */
  entityScope?: VegaEntityScope
  /**
   *
   * @type {VegaIndividualScope}
   * @memberof VegaDispatchStrategy
   */
  individualScope?: VegaIndividualScope
  /**
   *
   * @type {string}
   * @memberof VegaDispatchStrategy
   */
  lockPeriod?: string
  /**
   * Optional markets in scope.
   * @type {Array<string>}
   * @memberof VegaDispatchStrategy
   */
  markets?: Array<string>
  /**
   *
   * @type {VegaDispatchMetric}
   * @memberof VegaDispatchStrategy
   */
  metric?: VegaDispatchMetric
  /**
   *
   * @type {string}
   * @memberof VegaDispatchStrategy
   */
  nTopPerformers?: string
  /**
   *
   * @type {string}
   * @memberof VegaDispatchStrategy
   */
  notionalTimeWeightedAveragePositionRequirement?: string
  /**
   * Ordered list, using start rank, defining the rank bands and share ratio for each band. Mandatory for the rank distribution strategy.
   * @type {Array<VegaRank>}
   * @memberof VegaDispatchStrategy
   */
  rankTable?: Array<VegaRank>
  /**
   *
   * @type {string}
   * @memberof VegaDispatchStrategy
   */
  stakingRequirement?: string
  /**
   *
   * @type {Array<string>}
   * @memberof VegaDispatchStrategy
   */
  teamScope?: Array<string>
  /**
   *
   * @type {string}
   * @memberof VegaDispatchStrategy
   */
  windowLength?: string
}
/**
 *  - DISTRIBUTION_STRATEGY_PRO_RATA: Rewards funded using the pro-rata strategy should be distributed pro-rata by each entity's reward metric, scaled by any active multipliers that party has.  - DISTRIBUTION_STRATEGY_RANK: Rewards funded using the party rank.
 * @export
 * @enum {string}
 */
export enum VegaDistributionStrategy {
  UNSPECIFIED = 'DISTRIBUTION_STRATEGY_UNSPECIFIED' as any,
  PRORATA = 'DISTRIBUTION_STRATEGY_PRO_RATA' as any,
  RANK = 'DISTRIBUTION_STRATEGY_RANK' as any
}
/**
 *
 * @export
 * @interface VegaERC20
 */
export interface VegaERC20 {
  /**
   * Address of the contract for the token, on the ethereum network.
   * @type {string}
   * @memberof VegaERC20
   */
  contractAddress?: string
  /**
   * Lifetime limits deposit per address note: this is a temporary measure that can be changed by governance.
   * @type {string}
   * @memberof VegaERC20
   */
  lifetimeLimit?: string
  /**
   * Maximum you can withdraw instantly. All withdrawals over the threshold will be delayed by the withdrawal delay. There’s no limit on the size of a withdrawal note: this is a temporary measure that can be changed by governance.
   * @type {string}
   * @memberof VegaERC20
   */
  withdrawThreshold?: string
}
/**
 *
 * @export
 * @interface VegaERC20Update
 */
export interface VegaERC20Update {
  /**
   * Lifetime limits deposit per address. This will be interpreted against the asset decimals. note: this is a temporary measure that can be changed by governance.
   * @type {string}
   * @memberof VegaERC20Update
   */
  lifetimeLimit?: string
  /**
   * Maximum you can withdraw instantly. All withdrawals over the threshold will be delayed by the withdrawal delay. There’s no limit on the size of a withdrawal note: this is a temporary measure that can be changed by governance.
   * @type {string}
   * @memberof VegaERC20Update
   */
  withdrawThreshold?: string
}
/**
 *
 * @export
 * @enum {string}
 */
export enum VegaEntityScope {
  UNSPECIFIED = 'ENTITY_SCOPE_UNSPECIFIED' as any,
  INDIVIDUALS = 'ENTITY_SCOPE_INDIVIDUALS' as any,
  TEAMS = 'ENTITY_SCOPE_TEAMS' as any
}
/**
 * Specifies a data source that derives its content from calling a read method on an Ethereum contract.
 * @export
 * @interface VegaEthCallSpec
 */
export interface VegaEthCallSpec {
  /**
   * The ABI of that contract.
   * @type {string}
   * @memberof VegaEthCallSpec
   */
  abi?: string
  /**
   * Ethereum address of the contract to call.
   * @type {string}
   * @memberof VegaEthCallSpec
   */
  address?: string
  /**
   * List of arguments to pass to method call. Protobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum type according to the ABI.
   * @type {Array<any>}
   * @memberof VegaEthCallSpec
   */
  args?: Array<any>
  /**
   *
   * @type {Array<V1Filter>}
   * @memberof VegaEthCallSpec
   */
  filters?: Array<V1Filter>
  /**
   * Name of the method on the contract to call.
   * @type {string}
   * @memberof VegaEthCallSpec
   */
  method?: string
  /**
   * Normalisers are used to convert the data returned from the contract method into a standard format. The key of the map is the name of the property, which identifies the specific piece of data to other parts of the data sourcing framework, for example filters. The value is a JSONPath expression for expressing where in the contract call result the required data is located, for example $[0] indicates the first result. $[1].price would look in the second result returned from the contract for a structure with a key called 'price' and use that if it exists.
   * @type {Array<VegaNormaliser>}
   * @memberof VegaEthCallSpec
   */
  normalisers?: Array<VegaNormaliser>
  /**
   *
   * @type {string}
   * @memberof VegaEthCallSpec
   */
  requiredConfirmations?: string
  /**
   *
   * @type {VegaEthCallTrigger}
   * @memberof VegaEthCallSpec
   */
  trigger?: VegaEthCallTrigger
}
/**
 * Determines when the contract method should be called.
 * @export
 * @interface VegaEthCallTrigger
 */
export interface VegaEthCallTrigger {
  /**
   *
   * @type {VegaEthTimeTrigger}
   * @memberof VegaEthCallTrigger
   */
  timeTrigger?: VegaEthTimeTrigger
}
/**
 * Trigger for an Ethereum call based on the Ethereum block timestamp. Can be one-off or repeating.
 * @export
 * @interface VegaEthTimeTrigger
 */
export interface VegaEthTimeTrigger {
  /**
   * Repeat the call every n seconds after the initial call. If no time for initial call was specified, begin repeating immediately.
   * @type {string}
   * @memberof VegaEthTimeTrigger
   */
  every?: string
  /**
   * Trigger when the Ethereum time is greater or equal to this time, in Unix seconds.
   * @type {string}
   * @memberof VegaEthTimeTrigger
   */
  initial?: string
  /**
   * If repeating, stop once Ethereum time is greater than this time, in Unix seconds. If not set, then repeat indefinitely.
   * @type {string}
   * @memberof VegaEthTimeTrigger
   */
  until?: string
}
/**
 *
 * @export
 * @interface VegaFeeFactors
 */
export interface VegaFeeFactors {
  /**
   * Infrastructure fee charged network wide for staking and governance.
   * @type {string}
   * @memberof VegaFeeFactors
   */
  infrastructureFee?: string
  /**
   * Liquidity fee applied per market for market making.
   * @type {string}
   * @memberof VegaFeeFactors
   */
  liquidityFee?: string
  /**
   * Market maker fee charged network wide.
   * @type {string}
   * @memberof VegaFeeFactors
   */
  makerFee?: string
}
/**
 *
 * @export
 * @interface VegaFees
 */
export interface VegaFees {
  /**
   *
   * @type {VegaFeeFactors}
   * @memberof VegaFees
   */
  factors?: VegaFeeFactors
}
/**
 *
 * @export
 * @interface VegaFuture
 */
export interface VegaFuture {
  /**
   *
   * @type {VegaDataSourceSpecToFutureBinding}
   * @memberof VegaFuture
   */
  dataSourceSpecBinding?: VegaDataSourceSpecToFutureBinding
  /**
   *
   * @type {VegaDataSourceSpec}
   * @memberof VegaFuture
   */
  dataSourceSpecForSettlementData?: VegaDataSourceSpec
  /**
   *
   * @type {VegaDataSourceSpec}
   * @memberof VegaFuture
   */
  dataSourceSpecForTradingTermination?: VegaDataSourceSpec
  /**
   * Quote name of the instrument.
   * @type {string}
   * @memberof VegaFuture
   */
  quoteName?: string
  /**
   * Underlying asset for the future.
   * @type {string}
   * @memberof VegaFuture
   */
  settlementAsset?: string
}
/**
 *
 * @export
 * @interface VegaFutureProduct
 */
export interface VegaFutureProduct {
  /**
   *
   * @type {VegaDataSourceSpecToFutureBinding}
   * @memberof VegaFutureProduct
   */
  dataSourceSpecBinding?: VegaDataSourceSpecToFutureBinding
  /**
   *
   * @type {VegaDataSourceDefinition}
   * @memberof VegaFutureProduct
   */
  dataSourceSpecForSettlementData?: VegaDataSourceDefinition
  /**
   *
   * @type {VegaDataSourceDefinition}
   * @memberof VegaFutureProduct
   */
  dataSourceSpecForTradingTermination?: VegaDataSourceDefinition
  /**
   * Product quote name.
   * @type {string}
   * @memberof VegaFutureProduct
   */
  quoteName?: string
  /**
   * Asset ID for the product's settlement asset.
   * @type {string}
   * @memberof VegaFutureProduct
   */
  settlementAsset?: string
}
/**
 *
 * @export
 * @enum {string}
 */
export enum VegaGovernanceTransferType {
  UNSPECIFIED = 'GOVERNANCE_TRANSFER_TYPE_UNSPECIFIED' as any,
  ALLORNOTHING = 'GOVERNANCE_TRANSFER_TYPE_ALL_OR_NOTHING' as any,
  BESTEFFORT = 'GOVERNANCE_TRANSFER_TYPE_BEST_EFFORT' as any
}
/**
 *  - INDIVIDUAL_SCOPE_ALL: All parties on the network are within the scope of this reward.  - INDIVIDUAL_SCOPE_IN_TEAM: All parties that are part of a team are within the scope of this reward.  - INDIVIDUAL_SCOPE_NOT_IN_TEAM: All parties that are not part of a team are within the scope of this reward.
 * @export
 * @enum {string}
 */
export enum VegaIndividualScope {
  UNSPECIFIED = 'INDIVIDUAL_SCOPE_UNSPECIFIED' as any,
  ALL = 'INDIVIDUAL_SCOPE_ALL' as any,
  INTEAM = 'INDIVIDUAL_SCOPE_IN_TEAM' as any,
  NOTINTEAM = 'INDIVIDUAL_SCOPE_NOT_IN_TEAM' as any
}
/**
 *
 * @export
 * @interface VegaInstrument
 */
export interface VegaInstrument {
  /**
   * Code for the instrument.
   * @type {string}
   * @memberof VegaInstrument
   */
  code?: string
  /**
   *
   * @type {VegaFuture}
   * @memberof VegaInstrument
   */
  future?: VegaFuture
  /**
   * Unique instrument ID.
   * @type {string}
   * @memberof VegaInstrument
   */
  id?: string
  /**
   *
   * @type {VegaInstrumentMetadata}
   * @memberof VegaInstrument
   */
  metadata?: VegaInstrumentMetadata
  /**
   * Name of the instrument.
   * @type {string}
   * @memberof VegaInstrument
   */
  name?: string
  /**
   *
   * @type {VegaPerpetual}
   * @memberof VegaInstrument
   */
  perpetual?: VegaPerpetual
  /**
   *
   * @type {VegaSpot}
   * @memberof VegaInstrument
   */
  spot?: VegaSpot
}
/**
 *
 * @export
 * @interface VegaInstrumentConfiguration
 */
export interface VegaInstrumentConfiguration {
  /**
   * Instrument code, human-readable shortcode used to describe the instrument.
   * @type {string}
   * @memberof VegaInstrumentConfiguration
   */
  code?: string
  /**
   *
   * @type {VegaFutureProduct}
   * @memberof VegaInstrumentConfiguration
   */
  future?: VegaFutureProduct
  /**
   * Instrument name.
   * @type {string}
   * @memberof VegaInstrumentConfiguration
   */
  name?: string
  /**
   *
   * @type {VegaPerpetualProduct}
   * @memberof VegaInstrumentConfiguration
   */
  perpetual?: VegaPerpetualProduct
  /**
   *
   * @type {VegaSpotProduct}
   * @memberof VegaInstrumentConfiguration
   */
  spot?: VegaSpotProduct
}
/**
 *
 * @export
 * @interface VegaInstrumentMetadata
 */
export interface VegaInstrumentMetadata {
  /**
   * List of 0 or more tags.
   * @type {Array<string>}
   * @memberof VegaInstrumentMetadata
   */
  tags?: Array<string>
}
/**
 *
 * @export
 * @interface VegaLiquidityMonitoringParameters
 */
export interface VegaLiquidityMonitoringParameters {
  /**
   * Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction.
   * @type {string}
   * @memberof VegaLiquidityMonitoringParameters
   */
  auctionExtension?: string
  /**
   *
   * @type {VegaTargetStakeParameters}
   * @memberof VegaLiquidityMonitoringParameters
   */
  targetStakeParameters?: VegaTargetStakeParameters
  /**
   * Specifies the triggering ratio for entering liquidity auction.
   * @type {string}
   * @memberof VegaLiquidityMonitoringParameters
   */
  triggeringRatio?: string
}
/**
 *
 * @export
 * @interface VegaLiquidityProviderFeeShare
 */
export interface VegaLiquidityProviderFeeShare {
  /**
   * Average entry valuation of the liquidity provider for the market.
   * @type {string}
   * @memberof VegaLiquidityProviderFeeShare
   */
  averageEntryValuation?: string
  /**
   * Average liquidity score.
   * @type {string}
   * @memberof VegaLiquidityProviderFeeShare
   */
  averageScore?: string
  /**
   * Share own by this liquidity provider.
   * @type {string}
   * @memberof VegaLiquidityProviderFeeShare
   */
  equityLikeShare?: string
  /**
   * Liquidity provider party ID.
   * @type {string}
   * @memberof VegaLiquidityProviderFeeShare
   */
  party?: string
  /**
   * The virtual stake of this liquidity provider.
   * @type {string}
   * @memberof VegaLiquidityProviderFeeShare
   */
  virtualStake?: string
}
/**
 *
 * @export
 * @interface VegaLiquiditySLAParameters
 */
export interface VegaLiquiditySLAParameters {
  /**
   * Specifies the minimum fraction of time LPs must spend \"on the book\" providing their committed liquidity.
   * @type {string}
   * @memberof VegaLiquiditySLAParameters
   */
  commitmentMinTimeFraction?: string
  /**
   * Specifies the number of liquidity epochs over which past performance will continue to affect rewards.
   * @type {string}
   * @memberof VegaLiquiditySLAParameters
   */
  performanceHysteresisEpochs?: string
  /**
   *
   * @type {string}
   * @memberof VegaLiquiditySLAParameters
   */
  priceRange?: string
  /**
   * Specifies the maximum fraction of their accrued fees an LP that meets the SLA implied by market.liquidity.commitmentMinTimeFraction will lose to liquidity providers that achieved a higher SLA performance than them.
   * @type {string}
   * @memberof VegaLiquiditySLAParameters
   */
  slaCompetitionFactor?: string
}
/**
 *
 * @export
 * @interface VegaLogNormalModelParams
 */
export interface VegaLogNormalModelParams {
  /**
   * Mu parameter, annualised growth rate of the underlying asset.
   * @type {number}
   * @memberof VegaLogNormalModelParams
   */
  mu?: number
  /**
   * R parameter, annualised growth rate of the risk-free asset, used for discounting of future cash flows, can be any real number.
   * @type {number}
   * @memberof VegaLogNormalModelParams
   */
  r?: number
  /**
   * Sigma parameter, annualised volatility of the underlying asset, must be a strictly non-negative real number.
   * @type {number}
   * @memberof VegaLogNormalModelParams
   */
  sigma?: number
}
/**
 *
 * @export
 * @interface VegaLogNormalRiskModel
 */
export interface VegaLogNormalRiskModel {
  /**
   *
   * @type {VegaLogNormalModelParams}
   * @memberof VegaLogNormalRiskModel
   */
  params?: VegaLogNormalModelParams
  /**
   * Risk Aversion Parameter.
   * @type {number}
   * @memberof VegaLogNormalRiskModel
   */
  riskAversionParameter?: number
  /**
   * Tau parameter of the risk model, projection horizon measured as a year fraction used in the expected shortfall calculation to obtain the maintenance margin, must be a strictly non-negative real number.
   * @type {number}
   * @memberof VegaLogNormalRiskModel
   */
  tau?: number
}
/**
 *
 * @export
 * @interface VegaMarginCalculator
 */
export interface VegaMarginCalculator {
  /**
   *
   * @type {VegaScalingFactors}
   * @memberof VegaMarginCalculator
   */
  scalingFactors?: VegaScalingFactors
}
/**
 *
 * @export
 * @interface VegaMarket
 */
export interface VegaMarket {
  /**
   * Number of decimal places that a price must be shifted by in order to get a correct price denominated in the currency of the market, for example: `realPrice = price / 10^decimalPlaces`.
   * @type {string}
   * @memberof VegaMarket
   */
  decimalPlaces?: string
  /**
   *
   * @type {VegaFees}
   * @memberof VegaMarket
   */
  fees?: VegaFees
  /**
   * Unique ID for the market.
   * @type {string}
   * @memberof VegaMarket
   */
  id?: string
  /**
   * The fraction of the parent market's insurance pool that this market inherits; range 0 through 1.
   * @type {string}
   * @memberof VegaMarket
   */
  insurancePoolFraction?: string
  /**
   * Linear slippage factor is used to cap the slippage component of maintenance margin - it is applied to the slippage volume.
   * @type {string}
   * @memberof VegaMarket
   */
  linearSlippageFactor?: string
  /**
   *
   * @type {VegaLiquidityMonitoringParameters}
   * @memberof VegaMarket
   */
  liquidityMonitoringParameters?: VegaLiquidityMonitoringParameters
  /**
   *
   * @type {VegaLiquiditySLAParameters}
   * @memberof VegaMarket
   */
  liquiditySlaParams?: VegaLiquiditySLAParameters
  /**
   * Percentage move up and down from the mid price which specifies the range of price levels over which automated liquidity provision orders will be deployed.
   * @type {string}
   * @memberof VegaMarket
   */
  lpPriceRange?: string
  /**
   *
   * @type {VegaMarketTimestamps}
   * @memberof VegaMarket
   */
  marketTimestamps?: VegaMarketTimestamps
  /**
   *
   * @type {VegaAuctionDuration}
   * @memberof VegaMarket
   */
  openingAuction?: VegaAuctionDuration
  /**
   *
   * @type {string}
   * @memberof VegaMarket
   */
  parentMarketId?: string
  /**
   * The number of decimal places for a position.
   * @type {string}
   * @memberof VegaMarket
   */
  positionDecimalPlaces?: string
  /**
   *
   * @type {VegaPriceMonitoringSettings}
   * @memberof VegaMarket
   */
  priceMonitoringSettings?: VegaPriceMonitoringSettings
  /**
   * Quadratic slippage factor is used to cap the slippage component of maintenance margin - it is applied to the square of the slippage volume.
   * @type {string}
   * @memberof VegaMarket
   */
  quadraticSlippageFactor?: string
  /**
   *
   * @type {VegaMarketState}
   * @memberof VegaMarket
   */
  state?: VegaMarketState
  /**
   * ID of the market that succeeds this market if it exists. This will be populated by the system when the successor market is enabled.
   * @type {string}
   * @memberof VegaMarket
   */
  successorMarketId?: string
  /**
   *
   * @type {VegaTradableInstrument}
   * @memberof VegaMarket
   */
  tradableInstrument?: VegaTradableInstrument
  /**
   *
   * @type {MarketTradingMode}
   * @memberof VegaMarket
   */
  tradingMode?: MarketTradingMode
}
/**
 *
 * @export
 * @interface VegaMarketData
 */
export interface VegaMarketData {
  /**
   * Time in seconds until the end of the auction (zero if currently not in auction period).
   * @type {string}
   * @memberof VegaMarketData
   */
  auctionEnd?: string
  /**
   * Time until next auction, or start time of the current auction if market is in auction period.
   * @type {string}
   * @memberof VegaMarketData
   */
  auctionStart?: string
  /**
   * Highest price level on an order book for buy orders, as an unsigned integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places.
   * @type {string}
   * @memberof VegaMarketData
   */
  bestBidPrice?: string
  /**
   * Aggregated volume being bid at the best bid price, as an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market is configured to 5 decimal places.
   * @type {string}
   * @memberof VegaMarketData
   */
  bestBidVolume?: string
  /**
   * Lowest price level on an order book for offer orders. This field is an unsigned integer scaled to the market's decimal places.
   * @type {string}
   * @memberof VegaMarketData
   */
  bestOfferPrice?: string
  /**
   * Aggregated volume being offered at the best offer price, as an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market is configured to 5 decimal places.
   * @type {string}
   * @memberof VegaMarketData
   */
  bestOfferVolume?: string
  /**
   * Highest price on the order book for buy orders not including pegged orders. This field is an unsigned integer scaled to the market's decimal places.
   * @type {string}
   * @memberof VegaMarketData
   */
  bestStaticBidPrice?: string
  /**
   * Total volume at the best static bid price excluding pegged orders.
   * @type {string}
   * @memberof VegaMarketData
   */
  bestStaticBidVolume?: string
  /**
   * Lowest price on the order book for sell orders not including pegged orders. This field is an unsigned integer scaled to the market's decimal places.
   * @type {string}
   * @memberof VegaMarketData
   */
  bestStaticOfferPrice?: string
  /**
   * Total volume at the best static offer price, excluding pegged orders.
   * @type {string}
   * @memberof VegaMarketData
   */
  bestStaticOfferVolume?: string
  /**
   *
   * @type {VegaAuctionTrigger}
   * @memberof VegaMarketData
   */
  extensionTrigger?: VegaAuctionTrigger
  /**
   * Indicative price (zero if not in auction). This field is an unsigned scaled to the market's decimal places.
   * @type {string}
   * @memberof VegaMarketData
   */
  indicativePrice?: string
  /**
   * Indicative volume (zero if not in auction).
   * @type {string}
   * @memberof VegaMarketData
   */
  indicativeVolume?: string
  /**
   * Last traded price of the market. This field is an unsigned integer scaled to the market's decimal places.
   * @type {string}
   * @memberof VegaMarketData
   */
  lastTradedPrice?: string
  /**
   * Equity like share of liquidity fee for each liquidity provider.
   * @type {Array<VegaLiquidityProviderFeeShare>}
   * @memberof VegaMarketData
   */
  liquidityProviderFeeShare?: Array<VegaLiquidityProviderFeeShare>
  /**
   * Mark price, as an unsigned integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places.
   * @type {string}
   * @memberof VegaMarketData
   */
  markPrice?: string
  /**
   *
   * @type {string}
   * @memberof VegaMarketData
   */
  market?: string
  /**
   * Market growth at the last market time window.
   * @type {string}
   * @memberof VegaMarketData
   */
  marketGrowth?: string
  /**
   *
   * @type {VegaMarketState}
   * @memberof VegaMarketData
   */
  marketState?: VegaMarketState
  /**
   *
   * @type {MarketTradingMode}
   * @memberof VegaMarketData
   */
  marketTradingMode?: MarketTradingMode
  /**
   * Market value proxy.
   * @type {string}
   * @memberof VegaMarketData
   */
  marketValueProxy?: string
  /**
   * Arithmetic average of the best bid price and best offer price, as an integer, for example `123456` is a correctly formatted price of `1.23456` assuming market configured to 5 decimal places.
   * @type {string}
   * @memberof VegaMarketData
   */
  midPrice?: string
  /**
   * Time in Unix nanoseconds when the next mark-to-market calculation will occur.
   * @type {string}
   * @memberof VegaMarketData
   */
  nextMarkToMarket?: string
  /**
   * Sum of the size of all positions greater than zero on the market.
   * @type {string}
   * @memberof VegaMarketData
   */
  openInterest?: string
  /**
   * One or more price monitoring bounds for the current timestamp.
   * @type {Array<VegaPriceMonitoringBounds>}
   * @memberof VegaMarketData
   */
  priceMonitoringBounds?: Array<VegaPriceMonitoringBounds>
  /**
   *
   * @type {VegaProductData}
   * @memberof VegaMarketData
   */
  productData?: VegaProductData
  /**
   * Arithmetic average of the best static bid price and best static offer price. This field is an unsigned integer scaled to the market's decimal places.
   * @type {string}
   * @memberof VegaMarketData
   */
  staticMidPrice?: string
  /**
   * Available stake for the given market. This field is an unsigned integer scaled to the settlement asset's decimal places.
   * @type {string}
   * @memberof VegaMarketData
   */
  suppliedStake?: string
  /**
   * Targeted stake for the given market. This field is an unsigned integer scaled to the settlement asset's decimal places.
   * @type {string}
   * @memberof VegaMarketData
   */
  targetStake?: string
  /**
   * Timestamp in Unix nanoseconds at which this mark price was relevant.
   * @type {string}
   * @memberof VegaMarketData
   */
  timestamp?: string
  /**
   *
   * @type {VegaAuctionTrigger}
   * @memberof VegaMarketData
   */
  trigger?: VegaAuctionTrigger
}
/**
 * - STATE_UNSPECIFIED: Default value, invalid  - STATE_PROPOSED: Governance proposal valid and accepted  - STATE_REJECTED: Outcome of governance votes is to reject the market  - STATE_PENDING: Governance vote passes/wins  - STATE_CANCELLED: Market triggers cancellation condition or governance votes to close before market becomes Active  - STATE_ACTIVE: Enactment date reached and usual auction exit checks pass  - STATE_SUSPENDED: Price monitoring or liquidity monitoring trigger  - STATE_CLOSED: Governance vote to close (Not currently implemented)  - STATE_TRADING_TERMINATED: Defined by the product (i.e. from a product parameter, specified in market definition, giving close date/time)  - STATE_SETTLED: Settlement triggered and completed as defined by product  - STATE_SUSPENDED_VIA_GOVERNANCE: Market has been suspended via governance
 * @export
 * @enum {string}
 */
export enum VegaMarketState {
  UNSPECIFIED = 'STATE_UNSPECIFIED' as any,
  PROPOSED = 'STATE_PROPOSED' as any,
  REJECTED = 'STATE_REJECTED' as any,
  PENDING = 'STATE_PENDING' as any,
  CANCELLED = 'STATE_CANCELLED' as any,
  ACTIVE = 'STATE_ACTIVE' as any,
  SUSPENDED = 'STATE_SUSPENDED' as any,
  CLOSED = 'STATE_CLOSED' as any,
  TRADINGTERMINATED = 'STATE_TRADING_TERMINATED' as any,
  SETTLED = 'STATE_SETTLED' as any,
  SUSPENDEDVIAGOVERNANCE = 'STATE_SUSPENDED_VIA_GOVERNANCE' as any
}
/**
 *
 * @export
 * @enum {string}
 */
export enum VegaMarketStateUpdateType {
  UNSPECIFIED = 'MARKET_STATE_UPDATE_TYPE_UNSPECIFIED' as any,
  TERMINATE = 'MARKET_STATE_UPDATE_TYPE_TERMINATE' as any,
  SUSPEND = 'MARKET_STATE_UPDATE_TYPE_SUSPEND' as any,
  RESUME = 'MARKET_STATE_UPDATE_TYPE_RESUME' as any
}
/**
 *
 * @export
 * @interface VegaMarketTimestamps
 */
export interface VegaMarketTimestamps {
  /**
   * Time when the market closed.
   * @type {string}
   * @memberof VegaMarketTimestamps
   */
  close?: string
  /**
   * Time when the market has left the opening auction and is ready to accept trades.
   * @type {string}
   * @memberof VegaMarketTimestamps
   */
  open?: string
  /**
   * Time when the market has been voted in and began its opening auction.
   * @type {string}
   * @memberof VegaMarketTimestamps
   */
  pending?: string
  /**
   * Time when the market is first proposed.
   * @type {string}
   * @memberof VegaMarketTimestamps
   */
  proposed?: string
}
/**
 *
 * @export
 * @interface VegaNetworkLimits
 */
export interface VegaNetworkLimits {
  /**
   * Are asset proposals allowed at this point in time.
   * @type {boolean}
   * @memberof VegaNetworkLimits
   */
  canProposeAsset?: boolean
  /**
   * Are market proposals allowed at this point in time.
   * @type {boolean}
   * @memberof VegaNetworkLimits
   */
  canProposeMarket?: boolean
  /**
   * Are perpetual market proposals allowed at this point in time.
   * @type {boolean}
   * @memberof VegaNetworkLimits
   */
  canProposePerpetualMarket?: boolean
  /**
   * Are spot market proposals allowed at this point in time.
   * @type {boolean}
   * @memberof VegaNetworkLimits
   */
  canProposeSpotMarket?: boolean
  /**
   * True once the genesis file is loaded.
   * @type {boolean}
   * @memberof VegaNetworkLimits
   */
  genesisLoaded?: boolean
  /**
   * Are asset proposals enabled on this chain.
   * @type {boolean}
   * @memberof VegaNetworkLimits
   */
  proposeAssetEnabled?: boolean
  /**
   * Timestamp in Unix nanoseconds at which asset proposals will be enabled (0 indicates not set).
   * @type {string}
   * @memberof VegaNetworkLimits
   */
  proposeAssetEnabledFrom?: string
  /**
   * Are market proposals enabled on this chain.
   * @type {boolean}
   * @memberof VegaNetworkLimits
   */
  proposeMarketEnabled?: boolean
  /**
   * Timestamp in Unix nanoseconds at which market proposals will be enabled (0 indicates not set).
   * @type {string}
   * @memberof VegaNetworkLimits
   */
  proposeMarketEnabledFrom?: string
}
/**
 *
 * @export
 * @interface VegaNetworkParameter
 */
export interface VegaNetworkParameter {
  /**
   * Unique key of the network parameter.
   * @type {string}
   * @memberof VegaNetworkParameter
   */
  key?: string
  /**
   * Value for the network parameter.
   * @type {string}
   * @memberof VegaNetworkParameter
   */
  value?: string
}
/**
 *
 * @export
 * @interface VegaNewAsset
 */
export interface VegaNewAsset {
  /**
   *
   * @type {VegaAssetDetails}
   * @memberof VegaNewAsset
   */
  changes?: VegaAssetDetails
}
/**
 * Freeform proposal This message is just used as a placeholder to sort out the nature of the proposal once parsed.
 * @export
 * @interface VegaNewFreeform
 */
export interface VegaNewFreeform {}
/**
 *
 * @export
 * @interface VegaNewMarket
 */
export interface VegaNewMarket {
  /**
   *
   * @type {VegaNewMarketConfiguration}
   * @memberof VegaNewMarket
   */
  changes?: VegaNewMarketConfiguration
}
/**
 *
 * @export
 * @interface VegaNewMarketConfiguration
 */
export interface VegaNewMarketConfiguration {
  /**
   * Decimal places used for the new futures market, sets the smallest price increment on the book.
   * @type {string}
   * @memberof VegaNewMarketConfiguration
   */
  decimalPlaces?: string
  /**
   *
   * @type {VegaInstrumentConfiguration}
   * @memberof VegaNewMarketConfiguration
   */
  instrument?: VegaInstrumentConfiguration
  /**
   * Linear slippage factor is used to cap the slippage component of maintenance margin - it is applied to the slippage volume.
   * @type {string}
   * @memberof VegaNewMarketConfiguration
   */
  linearSlippageFactor?: string
  /**
   *
   * @type {VegaLiquidityMonitoringParameters}
   * @memberof VegaNewMarketConfiguration
   */
  liquidityMonitoringParameters?: VegaLiquidityMonitoringParameters
  /**
   *
   * @type {VegaLiquiditySLAParameters}
   * @memberof VegaNewMarketConfiguration
   */
  liquiditySlaParameters?: VegaLiquiditySLAParameters
  /**
   *
   * @type {VegaLogNormalRiskModel}
   * @memberof VegaNewMarketConfiguration
   */
  logNormal?: VegaLogNormalRiskModel
  /**
   * DEPRECATED: Use liquidity SLA parameters instead. Percentage move up and down from the mid price which specifies the range of price levels over which automated liquidity provision orders will be deployed.
   * @type {string}
   * @memberof VegaNewMarketConfiguration
   */
  lpPriceRange?: string
  /**
   * Optional new futures market metadata, tags.
   * @type {Array<string>}
   * @memberof VegaNewMarketConfiguration
   */
  metadata?: Array<string>
  /**
   * Decimal places for order sizes, sets what size the smallest order / position on the futures market can be.
   * @type {string}
   * @memberof VegaNewMarketConfiguration
   */
  positionDecimalPlaces?: string
  /**
   *
   * @type {VegaPriceMonitoringParameters}
   * @memberof VegaNewMarketConfiguration
   */
  priceMonitoringParameters?: VegaPriceMonitoringParameters
  /**
   * Quadratic slippage factor is used to cap the slippage component of maintenance margin - it is applied to the square of the slippage volume.
   * @type {string}
   * @memberof VegaNewMarketConfiguration
   */
  quadraticSlippageFactor?: string
  /**
   *
   * @type {VegaSimpleModelParams}
   * @memberof VegaNewMarketConfiguration
   */
  simple?: VegaSimpleModelParams
  /**
   *
   * @type {VegaSuccessorConfiguration}
   * @memberof VegaNewMarketConfiguration
   */
  successor?: VegaSuccessorConfiguration
}
/**
 *
 * @export
 * @interface VegaNewSpotMarket
 */
export interface VegaNewSpotMarket {
  /**
   *
   * @type {VegaNewSpotMarketConfiguration}
   * @memberof VegaNewSpotMarket
   */
  changes?: VegaNewSpotMarketConfiguration
}
/**
 *
 * @export
 * @interface VegaNewSpotMarketConfiguration
 */
export interface VegaNewSpotMarketConfiguration {
  /**
   * Decimal places used for the new spot market, sets the smallest price increment on the book.
   * @type {string}
   * @memberof VegaNewSpotMarketConfiguration
   */
  decimalPlaces?: string
  /**
   *
   * @type {VegaInstrumentConfiguration}
   * @memberof VegaNewSpotMarketConfiguration
   */
  instrument?: VegaInstrumentConfiguration
  /**
   *
   * @type {VegaLogNormalRiskModel}
   * @memberof VegaNewSpotMarketConfiguration
   */
  logNormal?: VegaLogNormalRiskModel
  /**
   * Optional new spot market metadata, tags.
   * @type {Array<string>}
   * @memberof VegaNewSpotMarketConfiguration
   */
  metadata?: Array<string>
  /**
   * Decimal places for order sizes, sets what size the smallest order / position on the spot market can be.
   * @type {string}
   * @memberof VegaNewSpotMarketConfiguration
   */
  positionDecimalPlaces?: string
  /**
   *
   * @type {VegaPriceMonitoringParameters}
   * @memberof VegaNewSpotMarketConfiguration
   */
  priceMonitoringParameters?: VegaPriceMonitoringParameters
  /**
   *
   * @type {VegaSimpleModelParams}
   * @memberof VegaNewSpotMarketConfiguration
   */
  simple?: VegaSimpleModelParams
  /**
   *
   * @type {VegaLiquiditySLAParameters}
   * @memberof VegaNewSpotMarketConfiguration
   */
  slaParams?: VegaLiquiditySLAParameters
  /**
   *
   * @type {VegaTargetStakeParameters}
   * @memberof VegaNewSpotMarketConfiguration
   */
  targetStakeParameters?: VegaTargetStakeParameters
}
/**
 *
 * @export
 * @interface VegaNewTransfer
 */
export interface VegaNewTransfer {
  /**
   *
   * @type {VegaNewTransferConfiguration}
   * @memberof VegaNewTransfer
   */
  changes?: VegaNewTransferConfiguration
}
/**
 *
 * @export
 * @interface VegaNewTransferConfiguration
 */
export interface VegaNewTransferConfiguration {
  /**
   *
   * @type {string}
   * @memberof VegaNewTransferConfiguration
   */
  amount?: string
  /**
   *
   * @type {string}
   * @memberof VegaNewTransferConfiguration
   */
  asset?: string
  /**
   *
   * @type {string}
   * @memberof VegaNewTransferConfiguration
   */
  destination?: string
  /**
   *
   * @type {VegaAccountType}
   * @memberof VegaNewTransferConfiguration
   */
  destinationType?: VegaAccountType
  /**
   *
   * @type {string}
   * @memberof VegaNewTransferConfiguration
   */
  fractionOfBalance?: string
  /**
   *
   * @type {VegaOneOffTransfer}
   * @memberof VegaNewTransferConfiguration
   */
  oneOff?: VegaOneOffTransfer
  /**
   *
   * @type {VegaRecurringTransfer}
   * @memberof VegaNewTransferConfiguration
   */
  recurring?: VegaRecurringTransfer
  /**
   *
   * @type {string}
   * @memberof VegaNewTransferConfiguration
   */
  source?: string
  /**
   *
   * @type {VegaAccountType}
   * @memberof VegaNewTransferConfiguration
   */
  sourceType?: VegaAccountType
  /**
   *
   * @type {VegaGovernanceTransferType}
   * @memberof VegaNewTransferConfiguration
   */
  transferType?: VegaGovernanceTransferType
}
/**
 *
 * @export
 * @interface VegaNormaliser
 */
export interface VegaNormaliser {
  /**
   *
   * @type {string}
   * @memberof VegaNormaliser
   */
  expression?: string
  /**
   *
   * @type {string}
   * @memberof VegaNormaliser
   */
  name?: string
}
/**
 *
 * @export
 * @interface VegaOneOffTransfer
 */
export interface VegaOneOffTransfer {
  /**
   * Timestamp in Unix nanoseconds for when the transfer should be delivered into the receiver's account.
   * @type {string}
   * @memberof VegaOneOffTransfer
   */
  deliverOn?: string
}
/**
 *
 * @export
 * @interface VegaParty
 */
export interface VegaParty {
  /**
   * Unique ID for the party, typically represented by a public key.
   * @type {string}
   * @memberof VegaParty
   */
  id?: string
}
/**
 *
 * @export
 * @interface VegaPerpetual
 */
export interface VegaPerpetual {
  /**
   * Lower bound for the clamp function used as part of the funding rate calculation, in the range [-1, 1].
   * @type {string}
   * @memberof VegaPerpetual
   */
  clampLowerBound?: string
  /**
   * Upper bound for the clamp function used as part of the funding rate calculation, in the range [-1, 1].
   * @type {string}
   * @memberof VegaPerpetual
   */
  clampUpperBound?: string
  /**
   *
   * @type {VegaDataSourceSpecToPerpetualBinding}
   * @memberof VegaPerpetual
   */
  dataSourceSpecBinding?: VegaDataSourceSpecToPerpetualBinding
  /**
   *
   * @type {VegaDataSourceSpec}
   * @memberof VegaPerpetual
   */
  dataSourceSpecForSettlementData?: VegaDataSourceSpec
  /**
   *
   * @type {VegaDataSourceSpec}
   * @memberof VegaPerpetual
   */
  dataSourceSpecForSettlementSchedule?: VegaDataSourceSpec
  /**
   * Continuously compounded interest rate used in funding rate calculation, in the range [-1, 1].
   * @type {string}
   * @memberof VegaPerpetual
   */
  interestRate?: string
  /**
   * Controls how much the upcoming funding payment liability contributes to party's margin, in the range [0, 1].
   * @type {string}
   * @memberof VegaPerpetual
   */
  marginFundingFactor?: string
  /**
   * Quote name of the instrument.
   * @type {string}
   * @memberof VegaPerpetual
   */
  quoteName?: string
  /**
   * Underlying asset for the perpetual.
   * @type {string}
   * @memberof VegaPerpetual
   */
  settlementAsset?: string
}
/**
 * Represents market data specific to a perpetual market.
 * @export
 * @interface VegaPerpetualData
 */
export interface VegaPerpetualData {
  /**
   * Time-weighted-average the external data points for the in-progress funding period.
   * @type {string}
   * @memberof VegaPerpetualData
   */
  externalTwap?: string
  /**
   * Current funding payment for the in-progress funding period.
   * @type {string}
   * @memberof VegaPerpetualData
   */
  fundingPayment?: string
  /**
   * Current funding rate for the in-progress funding period.
   * @type {string}
   * @memberof VegaPerpetualData
   */
  fundingRate?: string
  /**
   * Time-weighted-average the internal data-points for the in-progress funding period.
   * @type {string}
   * @memberof VegaPerpetualData
   */
  internalTwap?: string
}
/**
 *
 * @export
 * @interface VegaPerpetualProduct
 */
export interface VegaPerpetualProduct {
  /**
   * Lower bound for the clamp function used as part of the funding rate calculation, in the range [-1, 1].
   * @type {string}
   * @memberof VegaPerpetualProduct
   */
  clampLowerBound?: string
  /**
   * Upper bound for the clamp function used as part of the funding rate calculation, in the range [-1, 1].
   * @type {string}
   * @memberof VegaPerpetualProduct
   */
  clampUpperBound?: string
  /**
   *
   * @type {VegaDataSourceSpecToPerpetualBinding}
   * @memberof VegaPerpetualProduct
   */
  dataSourceSpecBinding?: VegaDataSourceSpecToPerpetualBinding
  /**
   *
   * @type {VegaDataSourceDefinition}
   * @memberof VegaPerpetualProduct
   */
  dataSourceSpecForSettlementData?: VegaDataSourceDefinition
  /**
   *
   * @type {VegaDataSourceDefinition}
   * @memberof VegaPerpetualProduct
   */
  dataSourceSpecForSettlementSchedule?: VegaDataSourceDefinition
  /**
   * Continuously compounded interest rate used in funding rate calculation, in the range [-1, 1].
   * @type {string}
   * @memberof VegaPerpetualProduct
   */
  interestRate?: string
  /**
   * Controls how much the upcoming funding payment liability contributes to party's margin, in the range [0, 1].
   * @type {string}
   * @memberof VegaPerpetualProduct
   */
  marginFundingFactor?: string
  /**
   * Product quote name.
   * @type {string}
   * @memberof VegaPerpetualProduct
   */
  quoteName?: string
  /**
   * Asset ID for the product's settlement asset.
   * @type {string}
   * @memberof VegaPerpetualProduct
   */
  settlementAsset?: string
}
/**
 *
 * @export
 * @interface VegaPriceMonitoringBounds
 */
export interface VegaPriceMonitoringBounds {
  /**
   * Maximum price that isn't currently breaching the specified price monitoring trigger. This field is an unsigned integer scaled to the market's decimal places.
   * @type {string}
   * @memberof VegaPriceMonitoringBounds
   */
  maxValidPrice?: string
  /**
   * Minimum price that isn't currently breaching the specified price monitoring trigger. This field is an unsigned integer scaled to the market's decimal places.
   * @type {string}
   * @memberof VegaPriceMonitoringBounds
   */
  minValidPrice?: string
  /**
   * Reference price used to calculate the valid price range. This field is an unsigned integer scaled to the market's decimal places.
   * @type {string}
   * @memberof VegaPriceMonitoringBounds
   */
  referencePrice?: string
  /**
   *
   * @type {VegaPriceMonitoringTrigger}
   * @memberof VegaPriceMonitoringBounds
   */
  trigger?: VegaPriceMonitoringTrigger
}
/**
 *
 * @export
 * @interface VegaPriceMonitoringParameters
 */
export interface VegaPriceMonitoringParameters {
  /**
   *
   * @type {Array<VegaPriceMonitoringTrigger>}
   * @memberof VegaPriceMonitoringParameters
   */
  triggers?: Array<VegaPriceMonitoringTrigger>
}
/**
 *
 * @export
 * @interface VegaPriceMonitoringSettings
 */
export interface VegaPriceMonitoringSettings {
  /**
   *
   * @type {VegaPriceMonitoringParameters}
   * @memberof VegaPriceMonitoringSettings
   */
  parameters?: VegaPriceMonitoringParameters
}
/**
 *
 * @export
 * @interface VegaPriceMonitoringTrigger
 */
export interface VegaPriceMonitoringTrigger {
  /**
   * Price monitoring auction extension duration in seconds should the price breach its theoretical level over the specified horizon at the specified probability level.
   * @type {string}
   * @memberof VegaPriceMonitoringTrigger
   */
  auctionExtension?: string
  /**
   * Price monitoring projection horizon τ in seconds.
   * @type {string}
   * @memberof VegaPriceMonitoringTrigger
   */
  horizon?: string
  /**
   * Price monitoring probability level p.
   * @type {string}
   * @memberof VegaPriceMonitoringTrigger
   */
  probability?: string
}
/**
 * Represents market data specific to a particular product type.
 * @export
 * @interface VegaProductData
 */
export interface VegaProductData {
  /**
   *
   * @type {VegaPerpetualData}
   * @memberof VegaProductData
   */
  perpetualData?: VegaPerpetualData
}
/**
 *
 * @export
 * @interface VegaProposal
 */
export interface VegaProposal {
  /**
   * Detailed error associated to the reason.
   * @type {string}
   * @memberof VegaProposal
   */
  errorDetails?: string
  /**
   * Unique proposal ID.
   * @type {string}
   * @memberof VegaProposal
   */
  id?: string
  /**
   * Party ID i.e. public key of the party submitting the proposal.
   * @type {string}
   * @memberof VegaProposal
   */
  partyId?: string
  /**
   *
   * @type {VegaProposalRationale}
   * @memberof VegaProposal
   */
  rationale?: VegaProposalRationale
  /**
   *
   * @type {VegaProposalError}
   * @memberof VegaProposal
   */
  reason?: VegaProposalError
  /**
   * Proposal reference.
   * @type {string}
   * @memberof VegaProposal
   */
  reference?: string
  /**
   * Required majority from liquidity providers, optional but is required for market update proposal.
   * @type {string}
   * @memberof VegaProposal
   */
  requiredLiquidityProviderMajority?: string
  /**
   * Required participation from liquidity providers, optional but is required for market update proposal.
   * @type {string}
   * @memberof VegaProposal
   */
  requiredLiquidityProviderParticipation?: string
  /**
   * Required majority for this proposal.
   * @type {string}
   * @memberof VegaProposal
   */
  requiredMajority?: string
  /**
   * Required vote participation for this proposal.
   * @type {string}
   * @memberof VegaProposal
   */
  requiredParticipation?: string
  /**
   *
   * @type {VegaProposalState}
   * @memberof VegaProposal
   */
  state?: VegaProposalState
  /**
   *
   * @type {VegaProposalTerms}
   * @memberof VegaProposal
   */
  terms?: VegaProposalTerms
  /**
   * Proposal timestamp for date and time as Unix time in nanoseconds when proposal was submitted to the network.
   * @type {string}
   * @memberof VegaProposal
   */
  timestamp?: string
}
/**
 * - PROPOSAL_ERROR_UNSPECIFIED: Default value  - PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON: Specified close time is too early based on network parameters  - PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE: Specified close time is too late based on network parameters  - PROPOSAL_ERROR_ENACT_TIME_TOO_SOON: Specified enactment time is too early based on network parameters  - PROPOSAL_ERROR_ENACT_TIME_TOO_LATE: Specified enactment time is too late based on network parameters  - PROPOSAL_ERROR_INSUFFICIENT_TOKENS: Proposer for this proposal has insufficient tokens  - PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY: Instrument quote name and base name were the same  - PROPOSAL_ERROR_NO_PRODUCT: Proposal has no product  - PROPOSAL_ERROR_UNSUPPORTED_PRODUCT: Specified product is not supported  - PROPOSAL_ERROR_NO_TRADING_MODE: Proposal has no trading mode  - PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE: Proposal has an unsupported trading mode  - PROPOSAL_ERROR_NODE_VALIDATION_FAILED: Proposal failed node validation  - PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD: Field is missing in a builtin asset source  - PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS: Contract address is missing in the ERC20 asset source  - PROPOSAL_ERROR_INVALID_ASSET: Asset ID is invalid or does not exist on the Vega network  - PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS: Proposal terms timestamps are not compatible (Validation < Closing < Enactment)  - PROPOSAL_ERROR_NO_RISK_PARAMETERS: No risk parameters were specified  - PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY: Invalid key in update network parameter proposal  - PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE: Invalid value in update network parameter proposal  - PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED: Validation failed for network parameter proposal  - PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL: Opening auction duration is less than the network minimum opening auction time  - PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE: Opening auction duration is more than the network minimum opening auction time  - PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET: Market proposal market could not be instantiated in execution  - PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT: Market proposal market contained invalid product definition  - PROPOSAL_ERROR_INVALID_RISK_PARAMETER: Market proposal has invalid risk parameter  - PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED: Proposal was declined because vote didn't reach the majority threshold required  - PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED: Proposal declined because the participation threshold was not reached  - PROPOSAL_ERROR_INVALID_ASSET_DETAILS: Asset proposal has invalid asset details  - PROPOSAL_ERROR_UNKNOWN_TYPE: Proposal is an unknown type  - PROPOSAL_ERROR_UNKNOWN_RISK_PARAMETER_TYPE: Proposal has an unknown risk parameter type  - PROPOSAL_ERROR_INVALID_FREEFORM: Validation failed for freeform proposal  - PROPOSAL_ERROR_INSUFFICIENT_EQUITY_LIKE_SHARE: Party doesn't have enough equity-like share to propose an update on the market targeted by the proposal  - PROPOSAL_ERROR_INVALID_MARKET: Market targeted by the proposal does not exist or is not eligible for modification  - PROPOSAL_ERROR_TOO_MANY_MARKET_DECIMAL_PLACES: Market proposal decimal place is higher than the market settlement asset decimal places  - PROPOSAL_ERROR_TOO_MANY_PRICE_MONITORING_TRIGGERS: Market proposal contains too many price monitoring triggers  - PROPOSAL_ERROR_ERC20_ADDRESS_ALREADY_IN_USE: Market proposal contains too many price monitoring triggers  - PROPOSAL_ERROR_LP_PRICE_RANGE_NONPOSITIVE: LP price range must be larger than 0  - PROPOSAL_ERROR_LP_PRICE_RANGE_TOO_LARGE: LP price range must not be larger than 100  - PROPOSAL_ERROR_LINEAR_SLIPPAGE_FACTOR_OUT_OF_RANGE: Linear slippage factor is out of range, either negative or too large  - PROPOSAL_ERROR_QUADRATIC_SLIPPAGE_FACTOR_OUT_OF_RANGE: Quadratic slippage factor is out of range, either negative or too large  - PROPOSAL_ERROR_INVALID_SPOT: Validation failed for spot proposal  - PROPOSAL_ERROR_SPOT_PRODUCT_DISABLED: Spot trading not enabled  - PROPOSAL_ERROR_INVALID_SUCCESSOR_MARKET: Market proposal is invalid, either invalid insurance pool fraction, or it specifies a parent market that it can't succeed.  - PROPOSAL_ERROR_GOVERNANCE_TRANSFER_PROPOSAL_FAILED: Governance transfer proposal is invalid  - PROPOSAL_ERROR_GOVERNANCE_TRANSFER_PROPOSAL_INVALID: Governance transfer proposal failed  - PROPOSAL_ERROR_GOVERNANCE_CANCEL_TRANSFER_PROPOSAL_INVALID: Proposal for cancelling transfer is invalid, check proposal ID  - PROPOSAL_ERROR_INVALID_MARKET_STATE_UPDATE: Proposal for updating market state is invalid  - PROPOSAL_ERROR_INVALID_SLA_PARAMS: Liquidity provision SLA parameters are invalid  - PROPOSAL_ERROR_MISSING_SLA_PARAMS: Mandatory liquidity provision SLA parameters are missing  - PROPOSAL_ERROR_INVALID_PERPETUAL_PRODUCT: Perpetual market proposal contained invalid product definition  - PROPOSAL_ERROR_INVALID_REFERRAL_PROGRAM: Referral program proposal is invalid  - PROPOSAL_ERROR_INVALID_VOLUME_DISCOUNT_PROGRAM: Volume discount program proposal is invalid
 * @export
 * @enum {string}
 */
export enum VegaProposalError {
  UNSPECIFIED = 'PROPOSAL_ERROR_UNSPECIFIED' as any,
  CLOSETIMETOOSOON = 'PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON' as any,
  CLOSETIMETOOLATE = 'PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE' as any,
  ENACTTIMETOOSOON = 'PROPOSAL_ERROR_ENACT_TIME_TOO_SOON' as any,
  ENACTTIMETOOLATE = 'PROPOSAL_ERROR_ENACT_TIME_TOO_LATE' as any,
  INSUFFICIENTTOKENS = 'PROPOSAL_ERROR_INSUFFICIENT_TOKENS' as any,
  INVALIDINSTRUMENTSECURITY = 'PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY' as any,
  NOPRODUCT = 'PROPOSAL_ERROR_NO_PRODUCT' as any,
  UNSUPPORTEDPRODUCT = 'PROPOSAL_ERROR_UNSUPPORTED_PRODUCT' as any,
  NOTRADINGMODE = 'PROPOSAL_ERROR_NO_TRADING_MODE' as any,
  UNSUPPORTEDTRADINGMODE = 'PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE' as any,
  NODEVALIDATIONFAILED = 'PROPOSAL_ERROR_NODE_VALIDATION_FAILED' as any,
  MISSINGBUILTINASSETFIELD = 'PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD' as any,
  MISSINGERC20CONTRACTADDRESS = 'PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS' as any,
  INVALIDASSET = 'PROPOSAL_ERROR_INVALID_ASSET' as any,
  INCOMPATIBLETIMESTAMPS = 'PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS' as any,
  NORISKPARAMETERS = 'PROPOSAL_ERROR_NO_RISK_PARAMETERS' as any,
  NETWORKPARAMETERINVALIDKEY = 'PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY' as any,
  NETWORKPARAMETERINVALIDVALUE = 'PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE' as any,
  NETWORKPARAMETERVALIDATIONFAILED = 'PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED' as any,
  OPENINGAUCTIONDURATIONTOOSMALL = 'PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL' as any,
  OPENINGAUCTIONDURATIONTOOLARGE = 'PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE' as any,
  COULDNOTINSTANTIATEMARKET = 'PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET' as any,
  INVALIDFUTUREPRODUCT = 'PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT' as any,
  INVALIDRISKPARAMETER = 'PROPOSAL_ERROR_INVALID_RISK_PARAMETER' as any,
  MAJORITYTHRESHOLDNOTREACHED = 'PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED' as any,
  PARTICIPATIONTHRESHOLDNOTREACHED = 'PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED' as any,
  INVALIDASSETDETAILS = 'PROPOSAL_ERROR_INVALID_ASSET_DETAILS' as any,
  UNKNOWNTYPE = 'PROPOSAL_ERROR_UNKNOWN_TYPE' as any,
  UNKNOWNRISKPARAMETERTYPE = 'PROPOSAL_ERROR_UNKNOWN_RISK_PARAMETER_TYPE' as any,
  INVALIDFREEFORM = 'PROPOSAL_ERROR_INVALID_FREEFORM' as any,
  INSUFFICIENTEQUITYLIKESHARE = 'PROPOSAL_ERROR_INSUFFICIENT_EQUITY_LIKE_SHARE' as any,
  INVALIDMARKET = 'PROPOSAL_ERROR_INVALID_MARKET' as any,
  TOOMANYMARKETDECIMALPLACES = 'PROPOSAL_ERROR_TOO_MANY_MARKET_DECIMAL_PLACES' as any,
  TOOMANYPRICEMONITORINGTRIGGERS = 'PROPOSAL_ERROR_TOO_MANY_PRICE_MONITORING_TRIGGERS' as any,
  ERC20ADDRESSALREADYINUSE = 'PROPOSAL_ERROR_ERC20_ADDRESS_ALREADY_IN_USE' as any,
  LPPRICERANGENONPOSITIVE = 'PROPOSAL_ERROR_LP_PRICE_RANGE_NONPOSITIVE' as any,
  LPPRICERANGETOOLARGE = 'PROPOSAL_ERROR_LP_PRICE_RANGE_TOO_LARGE' as any,
  LINEARSLIPPAGEFACTOROUTOFRANGE = 'PROPOSAL_ERROR_LINEAR_SLIPPAGE_FACTOR_OUT_OF_RANGE' as any,
  QUADRATICSLIPPAGEFACTOROUTOFRANGE = 'PROPOSAL_ERROR_QUADRATIC_SLIPPAGE_FACTOR_OUT_OF_RANGE' as any,
  INVALIDSPOT = 'PROPOSAL_ERROR_INVALID_SPOT' as any,
  SPOTPRODUCTDISABLED = 'PROPOSAL_ERROR_SPOT_PRODUCT_DISABLED' as any,
  INVALIDSUCCESSORMARKET = 'PROPOSAL_ERROR_INVALID_SUCCESSOR_MARKET' as any,
  GOVERNANCETRANSFERPROPOSALFAILED = 'PROPOSAL_ERROR_GOVERNANCE_TRANSFER_PROPOSAL_FAILED' as any,
  GOVERNANCETRANSFERPROPOSALINVALID = 'PROPOSAL_ERROR_GOVERNANCE_TRANSFER_PROPOSAL_INVALID' as any,
  GOVERNANCECANCELTRANSFERPROPOSALINVALID = 'PROPOSAL_ERROR_GOVERNANCE_CANCEL_TRANSFER_PROPOSAL_INVALID' as any,
  INVALIDMARKETSTATEUPDATE = 'PROPOSAL_ERROR_INVALID_MARKET_STATE_UPDATE' as any,
  INVALIDSLAPARAMS = 'PROPOSAL_ERROR_INVALID_SLA_PARAMS' as any,
  MISSINGSLAPARAMS = 'PROPOSAL_ERROR_MISSING_SLA_PARAMS' as any,
  INVALIDPERPETUALPRODUCT = 'PROPOSAL_ERROR_INVALID_PERPETUAL_PRODUCT' as any,
  INVALIDREFERRALPROGRAM = 'PROPOSAL_ERROR_INVALID_REFERRAL_PROGRAM' as any,
  INVALIDVOLUMEDISCOUNTPROGRAM = 'PROPOSAL_ERROR_INVALID_VOLUME_DISCOUNT_PROGRAM' as any
}
/**
 * Rationale behind a proposal.
 * @export
 * @interface VegaProposalRationale
 */
export interface VegaProposalRationale {
  /**
   * Description to show a short title / something in case the link goes offline. This is to be between 0 and 20k unicode characters. This is mandatory for all proposals.
   * @type {string}
   * @memberof VegaProposalRationale
   */
  description?: string
  /**
   * Title to be used to give a short description of the proposal in lists. This is to be between 0 and 100 unicode characters. This is mandatory for all proposals.
   * @type {string}
   * @memberof VegaProposalRationale
   */
  title?: string
}
/**
 * - STATE_UNSPECIFIED: Default value, always invalid  - STATE_FAILED: Proposal enactment has failed - even though proposal has passed, its execution could not be performed  - STATE_OPEN: Proposal is open for voting  - STATE_PASSED: Proposal has gained enough support to be executed  - STATE_REJECTED: Proposal wasn't accepted i.e. proposal terms failed validation due to wrong configuration or failed to meet network requirements.  - STATE_DECLINED: Proposal didn't get enough votes, e.g. either failed to gain required participation or majority level.  - STATE_ENACTED: Proposal enacted  - STATE_WAITING_FOR_NODE_VOTE: Waiting for node validation of the proposal
 * @export
 * @enum {string}
 */
export enum VegaProposalState {
  UNSPECIFIED = 'STATE_UNSPECIFIED' as any,
  FAILED = 'STATE_FAILED' as any,
  OPEN = 'STATE_OPEN' as any,
  PASSED = 'STATE_PASSED' as any,
  REJECTED = 'STATE_REJECTED' as any,
  DECLINED = 'STATE_DECLINED' as any,
  ENACTED = 'STATE_ENACTED' as any,
  WAITINGFORNODEVOTE = 'STATE_WAITING_FOR_NODE_VOTE' as any
}
/**
 *
 * @export
 * @interface VegaProposalTerms
 */
export interface VegaProposalTerms {
  /**
   *
   * @type {VegaCancelTransfer}
   * @memberof VegaProposalTerms
   */
  cancelTransfer?: VegaCancelTransfer
  /**
   * Timestamp as Unix time in seconds when voting closes for this proposal, constrained by `minClose` and `maxClose` network parameters.
   * @type {string}
   * @memberof VegaProposalTerms
   */
  closingTimestamp?: string
  /**
   * Timestamp as Unix time in seconds when proposal gets enacted if passed, constrained by `minEnact` and `maxEnact` network parameters.
   * @type {string}
   * @memberof VegaProposalTerms
   */
  enactmentTimestamp?: string
  /**
   *
   * @type {VegaNewAsset}
   * @memberof VegaProposalTerms
   */
  newAsset?: VegaNewAsset
  /**
   *
   * @type {VegaNewFreeform}
   * @memberof VegaProposalTerms
   */
  newFreeform?: VegaNewFreeform
  /**
   *
   * @type {VegaNewMarket}
   * @memberof VegaProposalTerms
   */
  newMarket?: VegaNewMarket
  /**
   *
   * @type {VegaNewSpotMarket}
   * @memberof VegaProposalTerms
   */
  newSpotMarket?: VegaNewSpotMarket
  /**
   *
   * @type {VegaNewTransfer}
   * @memberof VegaProposalTerms
   */
  newTransfer?: VegaNewTransfer
  /**
   *
   * @type {VegaUpdateAsset}
   * @memberof VegaProposalTerms
   */
  updateAsset?: VegaUpdateAsset
  /**
   *
   * @type {VegaUpdateMarket}
   * @memberof VegaProposalTerms
   */
  updateMarket?: VegaUpdateMarket
  /**
   *
   * @type {VegaUpdateMarketState}
   * @memberof VegaProposalTerms
   */
  updateMarketState?: VegaUpdateMarketState
  /**
   *
   * @type {VegaUpdateNetworkParameter}
   * @memberof VegaProposalTerms
   */
  updateNetworkParameter?: VegaUpdateNetworkParameter
  /**
   *
   * @type {VegaUpdateReferralProgram}
   * @memberof VegaProposalTerms
   */
  updateReferralProgram?: VegaUpdateReferralProgram
  /**
   *
   * @type {VegaUpdateSpotMarket}
   * @memberof VegaProposalTerms
   */
  updateSpotMarket?: VegaUpdateSpotMarket
  /**
   *
   * @type {VegaUpdateVolumeDiscountProgram}
   * @memberof VegaProposalTerms
   */
  updateVolumeDiscountProgram?: VegaUpdateVolumeDiscountProgram
  /**
   * Validation timestamp as Unix time in seconds.
   * @type {string}
   * @memberof VegaProposalTerms
   */
  validationTimestamp?: string
}
/**
 *
 * @export
 * @interface VegaRank
 */
export interface VegaRank {
  /**
   *
   * @type {number}
   * @memberof VegaRank
   */
  shareRatio?: number
  /**
   *
   * @type {number}
   * @memberof VegaRank
   */
  startRank?: number
}
/**
 *
 * @export
 * @interface VegaRecurringTransfer
 */
export interface VegaRecurringTransfer {
  /**
   *
   * @type {VegaDispatchStrategy}
   * @memberof VegaRecurringTransfer
   */
  dispatchStrategy?: VegaDispatchStrategy
  /**
   * Last epoch at which this transfer shall be paid.
   * @type {string}
   * @memberof VegaRecurringTransfer
   */
  endEpoch?: string
  /**
   *
   * @type {string}
   * @memberof VegaRecurringTransfer
   */
  startEpoch?: string
}
/**
 *
 * @export
 * @interface VegaReferralProgram
 */
export interface VegaReferralProgram {
  /**
   * Defined benefit tiers in increasing order. First element will give Tier 1, second element will give Tier 2, and so on. Determines the level of benefit a party can expect based on performance criteria.
   * @type {Array<VegaBenefitTier>}
   * @memberof VegaReferralProgram
   */
  benefitTiers?: Array<VegaBenefitTier>
  /**
   * Timestamp as Unix time in seconds, after which when the current epoch ends, the programs status will become STATE_CLOSED and benefits will be disabled.
   * @type {string}
   * @memberof VegaReferralProgram
   */
  endOfProgramTimestamp?: string
  /**
   * Unique ID generated from the proposal that created this program.
   * @type {string}
   * @memberof VegaReferralProgram
   */
  id?: string
  /**
   * Defined staking tiers in increasing order. First element will give Tier 1, second element will give Tier 2, and so on. Determines the level of benefit a party can expect based on their staking.
   * @type {Array<VegaStakingTier>}
   * @memberof VegaReferralProgram
   */
  stakingTiers?: Array<VegaStakingTier>
  /**
   * Incremental version of the program. It is incremented after each program update.
   * @type {string}
   * @memberof VegaReferralProgram
   */
  version?: string
  /**
   * Number of epochs over which to evaluate a referral set's running volume.
   * @type {string}
   * @memberof VegaReferralProgram
   */
  windowLength?: string
}
/**
 *
 * @export
 * @interface VegaScalingFactors
 */
export interface VegaScalingFactors {
  /**
   * Collateral release level. If a trader has collateral above this level, the system will release collateral to a trader's general collateral account for the asset.
   * @type {number}
   * @memberof VegaScalingFactors
   */
  collateralRelease?: number
  /**
   * Initial margin level. This is the minimum amount of collateral required to open a position in a market that requires margin.
   * @type {number}
   * @memberof VegaScalingFactors
   */
  initialMargin?: number
  /**
   * Collateral search level. If collateral dips below this value, the system will search for collateral to release.
   * @type {number}
   * @memberof VegaScalingFactors
   */
  searchLevel?: number
}
/**
 *
 * @export
 * @interface VegaSimpleModelParams
 */
export interface VegaSimpleModelParams {
  /**
   * Pre-defined risk factor value for long.
   * @type {number}
   * @memberof VegaSimpleModelParams
   */
  factorLong?: number
  /**
   * Pre-defined risk factor value for short.
   * @type {number}
   * @memberof VegaSimpleModelParams
   */
  factorShort?: number
  /**
   * Pre-defined maximum price move up that the model considers as valid.
   * @type {number}
   * @memberof VegaSimpleModelParams
   */
  maxMoveUp?: number
  /**
   * Pre-defined minimum price move down that the model considers as valid.
   * @type {number}
   * @memberof VegaSimpleModelParams
   */
  minMoveDown?: number
  /**
   * Pre-defined constant probability of trading.
   * @type {number}
   * @memberof VegaSimpleModelParams
   */
  probabilityOfTrading?: number
}
/**
 *
 * @export
 * @interface VegaSimpleRiskModel
 */
export interface VegaSimpleRiskModel {
  /**
   *
   * @type {VegaSimpleModelParams}
   * @memberof VegaSimpleRiskModel
   */
  params?: VegaSimpleModelParams
}
/**
 *
 * @export
 * @interface VegaSpot
 */
export interface VegaSpot {
  /**
   * Asset ID of the underlying base asset for the spot product.
   * @type {string}
   * @memberof VegaSpot
   */
  baseAsset?: string
  /**
   * Name of the instrument.
   * @type {string}
   * @memberof VegaSpot
   */
  name?: string
  /**
   * Asset ID of the underlying quote asset for the spot product.
   * @type {string}
   * @memberof VegaSpot
   */
  quoteAsset?: string
}
/**
 *
 * @export
 * @interface VegaSpotProduct
 */
export interface VegaSpotProduct {
  /**
   * Base asset ID.
   * @type {string}
   * @memberof VegaSpotProduct
   */
  baseAsset?: string
  /**
   * Product name.
   * @type {string}
   * @memberof VegaSpotProduct
   */
  name?: string
  /**
   * Quote asset ID.
   * @type {string}
   * @memberof VegaSpotProduct
   */
  quoteAsset?: string
}
/**
 *
 * @export
 * @interface VegaStakingTier
 */
export interface VegaStakingTier {
  /**
   * Required number of governance tokens ($VEGA) a referrer must have staked to receive the multiplier.
   * @type {string}
   * @memberof VegaStakingTier
   */
  minimumStakedTokens?: string
  /**
   * Multiplier applied to the referral reward factor when calculating referral rewards due to the referrer.
   * @type {string}
   * @memberof VegaStakingTier
   */
  referralRewardMultiplier?: string
}
/**
 * Configuration required to turn a new market proposal in to a successor market proposal.
 * @export
 * @interface VegaSuccessorConfiguration
 */
export interface VegaSuccessorConfiguration {
  /**
   * A decimal value between or equal to 0 and 1, specifying the fraction of the insurance pool balance that is carried over from the parent market to the successor.
   * @type {string}
   * @memberof VegaSuccessorConfiguration
   */
  insurancePoolFraction?: string
  /**
   * ID of the market that the successor should take over from.
   * @type {string}
   * @memberof VegaSuccessorConfiguration
   */
  parentMarketId?: string
}
/**
 *
 * @export
 * @interface VegaTargetStakeParameters
 */
export interface VegaTargetStakeParameters {
  /**
   * Specifies scaling factors used in target stake calculation.
   * @type {number}
   * @memberof VegaTargetStakeParameters
   */
  scalingFactor?: number
  /**
   * Specifies length of time window expressed in seconds for target stake calculation.
   * @type {string}
   * @memberof VegaTargetStakeParameters
   */
  timeWindow?: string
}
/**
 *
 * @export
 * @interface VegaTradableInstrument
 */
export interface VegaTradableInstrument {
  /**
   *
   * @type {VegaInstrument}
   * @memberof VegaTradableInstrument
   */
  instrument?: VegaInstrument
  /**
   *
   * @type {VegaLogNormalRiskModel}
   * @memberof VegaTradableInstrument
   */
  logNormalRiskModel?: VegaLogNormalRiskModel
  /**
   *
   * @type {VegaMarginCalculator}
   * @memberof VegaTradableInstrument
   */
  marginCalculator?: VegaMarginCalculator
  /**
   *
   * @type {VegaSimpleRiskModel}
   * @memberof VegaTradableInstrument
   */
  simpleRiskModel?: VegaSimpleRiskModel
}
/**
 *
 * @export
 * @interface VegaUpdateAsset
 */
export interface VegaUpdateAsset {
  /**
   * Asset ID the update is for.
   * @type {string}
   * @memberof VegaUpdateAsset
   */
  assetId?: string
  /**
   *
   * @type {VegaAssetDetailsUpdate}
   * @memberof VegaUpdateAsset
   */
  changes?: VegaAssetDetailsUpdate
}
/**
 *
 * @export
 * @interface VegaUpdateFutureProduct
 */
export interface VegaUpdateFutureProduct {
  /**
   *
   * @type {VegaDataSourceSpecToFutureBinding}
   * @memberof VegaUpdateFutureProduct
   */
  dataSourceSpecBinding?: VegaDataSourceSpecToFutureBinding
  /**
   *
   * @type {VegaDataSourceDefinition}
   * @memberof VegaUpdateFutureProduct
   */
  dataSourceSpecForSettlementData?: VegaDataSourceDefinition
  /**
   *
   * @type {VegaDataSourceDefinition}
   * @memberof VegaUpdateFutureProduct
   */
  dataSourceSpecForTradingTermination?: VegaDataSourceDefinition
  /**
   * Human-readable name/abbreviation of the quote name.
   * @type {string}
   * @memberof VegaUpdateFutureProduct
   */
  quoteName?: string
}
/**
 *
 * @export
 * @interface VegaUpdateInstrumentConfiguration
 */
export interface VegaUpdateInstrumentConfiguration {
  /**
   * Instrument code, human-readable shortcode used to describe the instrument.
   * @type {string}
   * @memberof VegaUpdateInstrumentConfiguration
   */
  code?: string
  /**
   *
   * @type {VegaUpdateFutureProduct}
   * @memberof VegaUpdateInstrumentConfiguration
   */
  future?: VegaUpdateFutureProduct
  /**
   *
   * @type {VegaUpdatePerpetualProduct}
   * @memberof VegaUpdateInstrumentConfiguration
   */
  perpetual?: VegaUpdatePerpetualProduct
}
/**
 *
 * @export
 * @interface VegaUpdateMarket
 */
export interface VegaUpdateMarket {
  /**
   *
   * @type {VegaUpdateMarketConfiguration}
   * @memberof VegaUpdateMarket
   */
  changes?: VegaUpdateMarketConfiguration
  /**
   * Market ID the update is for.
   * @type {string}
   * @memberof VegaUpdateMarket
   */
  marketId?: string
}
/**
 *
 * @export
 * @interface VegaUpdateMarketConfiguration
 */
export interface VegaUpdateMarketConfiguration {
  /**
   *
   * @type {VegaUpdateInstrumentConfiguration}
   * @memberof VegaUpdateMarketConfiguration
   */
  instrument?: VegaUpdateInstrumentConfiguration
  /**
   * Linear slippage factor is used to cap the slippage component of maintenance margin - it is applied to the slippage volume.
   * @type {string}
   * @memberof VegaUpdateMarketConfiguration
   */
  linearSlippageFactor?: string
  /**
   *
   * @type {VegaLiquidityMonitoringParameters}
   * @memberof VegaUpdateMarketConfiguration
   */
  liquidityMonitoringParameters?: VegaLiquidityMonitoringParameters
  /**
   *
   * @type {VegaLiquiditySLAParameters}
   * @memberof VegaUpdateMarketConfiguration
   */
  liquiditySlaParameters?: VegaLiquiditySLAParameters
  /**
   *
   * @type {VegaLogNormalRiskModel}
   * @memberof VegaUpdateMarketConfiguration
   */
  logNormal?: VegaLogNormalRiskModel
  /**
   * DEPRECATED: Use liquidity SLA parameters instead. Percentage move up and down from the mid price which specifies the range of price levels over which automated liquidity provision orders will be deployed.
   * @type {string}
   * @memberof VegaUpdateMarketConfiguration
   */
  lpPriceRange?: string
  /**
   * Optional futures market metadata, tags.
   * @type {Array<string>}
   * @memberof VegaUpdateMarketConfiguration
   */
  metadata?: Array<string>
  /**
   *
   * @type {VegaPriceMonitoringParameters}
   * @memberof VegaUpdateMarketConfiguration
   */
  priceMonitoringParameters?: VegaPriceMonitoringParameters
  /**
   * Quadratic slippage factor is used to cap the slippage component of maintenance margin - it is applied to the square of the slippage volume.
   * @type {string}
   * @memberof VegaUpdateMarketConfiguration
   */
  quadraticSlippageFactor?: string
  /**
   *
   * @type {VegaSimpleModelParams}
   * @memberof VegaUpdateMarketConfiguration
   */
  simple?: VegaSimpleModelParams
}
/**
 *
 * @export
 * @interface VegaUpdateMarketState
 */
export interface VegaUpdateMarketState {
  /**
   *
   * @type {VegaUpdateMarketStateConfiguration}
   * @memberof VegaUpdateMarketState
   */
  changes?: VegaUpdateMarketStateConfiguration
}
/**
 *
 * @export
 * @interface VegaUpdateMarketStateConfiguration
 */
export interface VegaUpdateMarketStateConfiguration {
  /**
   *
   * @type {string}
   * @memberof VegaUpdateMarketStateConfiguration
   */
  marketId?: string
  /**
   *
   * @type {string}
   * @memberof VegaUpdateMarketStateConfiguration
   */
  price?: string
  /**
   *
   * @type {VegaMarketStateUpdateType}
   * @memberof VegaUpdateMarketStateConfiguration
   */
  updateType?: VegaMarketStateUpdateType
}
/**
 *
 * @export
 * @interface VegaUpdateNetworkParameter
 */
export interface VegaUpdateNetworkParameter {
  /**
   *
   * @type {VegaNetworkParameter}
   * @memberof VegaUpdateNetworkParameter
   */
  changes?: VegaNetworkParameter
}
/**
 *
 * @export
 * @interface VegaUpdatePerpetualProduct
 */
export interface VegaUpdatePerpetualProduct {
  /**
   * Lower bound for the clamp function used as part of the funding rate calculation, in the range [-1, 1].
   * @type {string}
   * @memberof VegaUpdatePerpetualProduct
   */
  clampLowerBound?: string
  /**
   * Upper bound for the clamp function used as part of the funding rate calculation, in the range [-1, 1].
   * @type {string}
   * @memberof VegaUpdatePerpetualProduct
   */
  clampUpperBound?: string
  /**
   *
   * @type {VegaDataSourceSpecToPerpetualBinding}
   * @memberof VegaUpdatePerpetualProduct
   */
  dataSourceSpecBinding?: VegaDataSourceSpecToPerpetualBinding
  /**
   *
   * @type {VegaDataSourceDefinition}
   * @memberof VegaUpdatePerpetualProduct
   */
  dataSourceSpecForSettlementData?: VegaDataSourceDefinition
  /**
   *
   * @type {VegaDataSourceDefinition}
   * @memberof VegaUpdatePerpetualProduct
   */
  dataSourceSpecForSettlementSchedule?: VegaDataSourceDefinition
  /**
   * Continuously compounded interest rate used in funding rate calculation, in the range [-1, 1].
   * @type {string}
   * @memberof VegaUpdatePerpetualProduct
   */
  interestRate?: string
  /**
   * Controls how much the upcoming funding payment liability contributes to party's margin, in the range [0, 1].
   * @type {string}
   * @memberof VegaUpdatePerpetualProduct
   */
  marginFundingFactor?: string
  /**
   * Human-readable name/abbreviation of the quote name.
   * @type {string}
   * @memberof VegaUpdatePerpetualProduct
   */
  quoteName?: string
}
/**
 *
 * @export
 * @interface VegaUpdateReferralProgram
 */
export interface VegaUpdateReferralProgram {
  /**
   *
   * @type {VegaReferralProgram}
   * @memberof VegaUpdateReferralProgram
   */
  changes?: VegaReferralProgram
}
/**
 *
 * @export
 * @interface VegaUpdateSpotMarket
 */
export interface VegaUpdateSpotMarket {
  /**
   *
   * @type {VegaUpdateSpotMarketConfiguration}
   * @memberof VegaUpdateSpotMarket
   */
  changes?: VegaUpdateSpotMarketConfiguration
  /**
   * Market ID the update is for.
   * @type {string}
   * @memberof VegaUpdateSpotMarket
   */
  marketId?: string
}
/**
 *
 * @export
 * @interface VegaUpdateSpotMarketConfiguration
 */
export interface VegaUpdateSpotMarketConfiguration {
  /**
   *
   * @type {VegaLogNormalRiskModel}
   * @memberof VegaUpdateSpotMarketConfiguration
   */
  logNormal?: VegaLogNormalRiskModel
  /**
   * Optional spot market metadata, tags.
   * @type {Array<string>}
   * @memberof VegaUpdateSpotMarketConfiguration
   */
  metadata?: Array<string>
  /**
   *
   * @type {VegaPriceMonitoringParameters}
   * @memberof VegaUpdateSpotMarketConfiguration
   */
  priceMonitoringParameters?: VegaPriceMonitoringParameters
  /**
   *
   * @type {VegaSimpleModelParams}
   * @memberof VegaUpdateSpotMarketConfiguration
   */
  simple?: VegaSimpleModelParams
  /**
   *
   * @type {VegaLiquiditySLAParameters}
   * @memberof VegaUpdateSpotMarketConfiguration
   */
  slaParams?: VegaLiquiditySLAParameters
  /**
   *
   * @type {VegaTargetStakeParameters}
   * @memberof VegaUpdateSpotMarketConfiguration
   */
  targetStakeParameters?: VegaTargetStakeParameters
}
/**
 *
 * @export
 * @interface VegaUpdateVolumeDiscountProgram
 */
export interface VegaUpdateVolumeDiscountProgram {
  /**
   *
   * @type {VegaVolumeDiscountProgram}
   * @memberof VegaUpdateVolumeDiscountProgram
   */
  changes?: VegaVolumeDiscountProgram
}
/**
 *
 * @export
 * @interface VegaVolumeBenefitTier
 */
export interface VegaVolumeBenefitTier {
  /**
   * Required running notional taker volume in quantum units for parties to access this tier.
   * @type {string}
   * @memberof VegaVolumeBenefitTier
   */
  minimumRunningNotionalTakerVolume?: string
  /**
   *
   * @type {string}
   * @memberof VegaVolumeBenefitTier
   */
  volumeDiscountFactor?: string
}
/**
 *
 * @export
 * @interface VegaVolumeDiscountProgram
 */
export interface VegaVolumeDiscountProgram {
  /**
   * Defined benefit tiers in increasing order. First element will give Tier 1, second element will give Tier 2, and so on. Determines the level of benefit a party can expect based on performance criteria.
   * @type {Array<VegaVolumeBenefitTier>}
   * @memberof VegaVolumeDiscountProgram
   */
  benefitTiers?: Array<VegaVolumeBenefitTier>
  /**
   * Timestamp as Unix time in seconds after which when the current epoch ends, the program's status will become STATE_CLOSED and benefits will be disabled.
   * @type {string}
   * @memberof VegaVolumeDiscountProgram
   */
  endOfProgramTimestamp?: string
  /**
   * Unique ID generated from the proposal that created this program.
   * @type {string}
   * @memberof VegaVolumeDiscountProgram
   */
  id?: string
  /**
   * Incremental version of the program. It is incremented after each program update.
   * @type {string}
   * @memberof VegaVolumeDiscountProgram
   */
  version?: string
  /**
   * Number of epochs over which to evaluate a referral set's running volume.
   * @type {string}
   * @memberof VegaVolumeDiscountProgram
   */
  windowLength?: string
}
/**
 *
 * @export
 * @interface VegaVote
 */
export interface VegaVote {
  /**
   * Voter's party ID.
   * @type {string}
   * @memberof VegaVote
   */
  partyId?: string
  /**
   * Proposal ID being voted on.
   * @type {string}
   * @memberof VegaVote
   */
  proposalId?: string
  /**
   * Timestamp in Unix nanoseconds when the vote was acknowledged by the network.
   * @type {string}
   * @memberof VegaVote
   */
  timestamp?: string
  /**
   * The weight of the vote compared to the total amount of equity-like share on the market.
   * @type {string}
   * @memberof VegaVote
   */
  totalEquityLikeShareWeight?: string
  /**
   * Total number of governance token for the party that cast the vote.
   * @type {string}
   * @memberof VegaVote
   */
  totalGovernanceTokenBalance?: string
  /**
   * The weight of this vote based on the total number of governance tokens.
   * @type {string}
   * @memberof VegaVote
   */
  totalGovernanceTokenWeight?: string
  /**
   *
   * @type {VegaVoteValue}
   * @memberof VegaVote
   */
  value?: VegaVoteValue
}
/**
 * - VALUE_UNSPECIFIED: Default value, always invalid  - VALUE_NO: Vote against the proposal  - VALUE_YES: Vote in favour of the proposal
 * @export
 * @enum {string}
 */
export enum VegaVoteValue {
  UNSPECIFIED = 'VALUE_UNSPECIFIED' as any,
  NO = 'VALUE_NO' as any,
  YES = 'VALUE_YES' as any
}
