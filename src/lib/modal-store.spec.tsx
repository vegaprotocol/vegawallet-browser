import { useModalStore } from './modal-store'

const initialState = useModalStore.getState()

describe('ModalStore', () => {
  beforeEach(() => {
    useModalStore.setState(initialState)
  })
  it('transaction modal sets modal as open and resolves promise with value', () => {
    expect(useModalStore.getState().transactionModalOpen).toBe(false)
    expect(useModalStore.getState().transactionPromise).toBe(null)
    const promise = useModalStore.getState().handleTransaction({})
    expect(useModalStore.getState().transactionModalOpen).toBe(true)
    expect(useModalStore.getState().transactionPromise).not.toBe(null)
    useModalStore.getState().handleTransactionDecision(true)
    expect(useModalStore.getState().transactionModalOpen).toBe(false)
    expect(useModalStore.getState().transactionPromise).toBe(null)
    return expect(promise).resolves.toBe(true)
  })
  it('transaction resolves with false if not approved', () => {
    expect(useModalStore.getState().transactionModalOpen).toBe(false)
    expect(useModalStore.getState().transactionPromise).toBe(null)
    const promise = useModalStore.getState().handleTransaction({})
    expect(useModalStore.getState().transactionModalOpen).toBe(true)
    expect(useModalStore.getState().transactionPromise).not.toBe(null)
    useModalStore.getState().handleTransactionDecision(false)
    expect(useModalStore.getState().transactionModalOpen).toBe(false)
    expect(useModalStore.getState().transactionPromise).toBe(null)
    return expect(promise).resolves.toBe(false)
  })
  it('connection modal sets modal as open and resolves promise with value', () => {
    expect(useModalStore.getState().connectionModalOpen).toBe(false)
    expect(useModalStore.getState().connectionPromise).toBe(null)
    const promise = useModalStore.getState().handleConnection({})
    expect(useModalStore.getState().connectionModalOpen).toBe(true)
    expect(useModalStore.getState().connectionPromise).not.toBe(null)
    useModalStore.getState().handleConnectionDecision(true)
    expect(useModalStore.getState().connectionModalOpen).toBe(false)
    expect(useModalStore.getState().connectionPromise).toBe(null)
    return expect(promise).resolves.toBe(true)
  })
  it('connection resolves with false if not approved', () => {
    expect(useModalStore.getState().connectionModalOpen).toBe(false)
    expect(useModalStore.getState().connectionPromise).toBe(null)
    const promise = useModalStore.getState().handleConnection({})
    expect(useModalStore.getState().connectionModalOpen).toBe(true)
    expect(useModalStore.getState().connectionPromise).not.toBe(null)
    useModalStore.getState().handleConnectionDecision(false)
    expect(useModalStore.getState().connectionModalOpen).toBe(false)
    expect(useModalStore.getState().connectionPromise).toBe(null)
    return expect(promise).resolves.toBe(false)
  })
})
