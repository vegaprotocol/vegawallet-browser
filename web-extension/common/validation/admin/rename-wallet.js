/// Autogenerated by `make` target `schemas`
'use strict'; export const validate = validate14; export default validate14; const schema16 = { type: 'object', additionalProperties: false, required: ['wallet', 'newName'], properties: { wallet: { type: 'string' }, newName: { type: 'string' } } }; function validate14 (data, { instancePath = '', parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (data && typeof data === 'object' && !Array.isArray(data)) { if (data.wallet === undefined) { const err0 = { instancePath, schemaPath: '#/required', keyword: 'required', params: { missingProperty: 'wallet' }, message: "must have required property '" + 'wallet' + "'" }; if (vErrors === null) { vErrors = [err0] } else { vErrors.push(err0) }errors++ } if (data.newName === undefined) { const err1 = { instancePath, schemaPath: '#/required', keyword: 'required', params: { missingProperty: 'newName' }, message: "must have required property '" + 'newName' + "'" }; if (vErrors === null) { vErrors = [err1] } else { vErrors.push(err1) }errors++ } for (const key0 in data) { if (!((key0 === 'wallet') || (key0 === 'newName'))) { const err2 = { instancePath, schemaPath: '#/additionalProperties', keyword: 'additionalProperties', params: { additionalProperty: key0 }, message: 'must NOT have additional properties' }; if (vErrors === null) { vErrors = [err2] } else { vErrors.push(err2) }errors++ } } if (data.wallet !== undefined) { if (typeof data.wallet !== 'string') { const err3 = { instancePath: instancePath + '/wallet', schemaPath: '#/properties/wallet/type', keyword: 'type', params: { type: 'string' }, message: 'must be string' }; if (vErrors === null) { vErrors = [err3] } else { vErrors.push(err3) }errors++ } } if (data.newName !== undefined) { if (typeof data.newName !== 'string') { const err4 = { instancePath: instancePath + '/newName', schemaPath: '#/properties/newName/type', keyword: 'type', params: { type: 'string' }, message: 'must be string' }; if (vErrors === null) { vErrors = [err4] } else { vErrors.push(err4) }errors++ } } } else { const err5 = { instancePath, schemaPath: '#/type', keyword: 'type', params: { type: 'object' }, message: 'must be object' }; if (vErrors === null) { vErrors = [err5] } else { vErrors.push(err5) }errors++ }validate14.errors = vErrors; return errors === 0 }
